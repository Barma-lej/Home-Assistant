# Xiaomi Roborock S50

# Integration #######################################################
# vacuum:
#   - platform: xiaomi_miio
#     name: "Robi"
#     host: !secret robi_ip
#     token: !secret robi_token

# Recorder ##########################################################
recorder:
  exclude:
    entities:
      - input_select.robi_fan_speed_list
      - input_select.robi_zone
      - input_boolean.robi_zone_settings
      - input_number.robi_passes
      - input_number.robi_start_minutes_weekend
      - input_number.robi_start_hour_weekend
      - input_number.robi_start_minutes_weekdays
      - input_number.robi_start_hour_weekdays

# Logbook ###########################################################
logbook:
  exclude:
    entities:
      - input_select.robi_fan_speed_list
      - input_select.robi_zone
      - input_boolean.robi_zone_settings
      - input_number.robi_passes
      - input_number.robi_start_minutes_weekend
      - input_number.robi_start_hour_weekend
      - input_number.robi_start_minutes_weekdays
      - input_number.robi_start_hour_weekdays

homeassistant:
  customize:
    # Sensors ###################
    sensor.robi_start_time_weekdays:
      friendly_name: "Startzeit (Wochentage)"
    sensor.robi_start_time_weekend:
      friendly_name: "Startzeit (Wochenende)"
    sensor.robi_battery:
      friendly_name: "Robi - Akku"
    sensor.robi_main_brush_pct:
      friendly_name: "Robi - Hauptbürste (percent)"
    sensor.robi_side_brush_pct:
      friendly_name: "Robi - Seitenbürste (percent)"
    sensor.robi_filter_pct:
      friendly_name: "Robi - Filter (percent)"
    sensor.robi_sensor_pct:
      friendly_name: "Robi - Sensoren (percent)"
    sensor.robi_total_cleaned_time:
      friendly_name: "Dauer (insg.)"

# Sensor  ###########################################################
template:
  - sensor:
      # States ####################
      - name: "robi_start_time_weekdays"
        unique_id: robi_start_time_weekdays
        state: "{{ '%0.02d:%0.02d' | format(states('input_number.robi_start_hour_weekdays') | int(0), states('input_number.robi_start_minutes_weekdays') | int(0)) }}"
        icon: mdi:clock-start

      - name: "robi_start_time_weekend"
        unique_id: robi_start_time_weekend
        state: "{{ '%0.02d:%0.02d' | format(states('input_number.robi_start_hour_weekend') | int(0), states('input_number.robi_start_minutes_weekend') | int(0)) }}"
        icon: mdi:clock-start

      - name: "robi_battery"
        unique_id: robi_battery
        state: "{{ state_attr('vacuum.robi','battery_level') | int(0) }}"
        device_class: battery
        unit_of_measurement: "%"

      # Accesories ################
      # Main brush
      - name: Robi main brush left fmt
        unique_id: robi_main_brush_left_fmt
        state: "{{ (states('sensor.robi_main_brush_left') | int(0) / 3600) | round(1) }}"
        icon: mdi:broom
        unit_of_measurement: "Std."

      - name: Robi main brush pct
        unique_id: robi_main_brush_pct
        state: "{{ (states('sensor.robi_main_brush_left_fmt') | int(0) / 3) | round(0) }}"
        icon: mdi:broom
        unit_of_measurement: "%"

      # Side brush
      - name: Robi side brush left fmt
        unique_id: robi_side_brush_left_fmt
        state: "{{ (states('sensor.robi_side_brush_left') | int(0) / 3600) | round(1) }}"
        icon: mdi:multiplication
        unit_of_measurement: "Std."

      - name: "robi_side_brush_pct"
        unique_id: robi_side_brush_pct
        state: "{{ (states('sensor.robi_side_brush_left_fmt') | int(0) / 2) | round(0) }}"
        icon: mdi:multiplication
        unit_of_measurement: "%"

      # Filter
      - name: Robi filter left fmt
        unique_id: robi_filter_left_fmt
        state: "{{ (states('sensor.robi_filter_left') | int(0) / 3600) | round(1) }}"
        icon: mdi:air-filter
        unit_of_measurement: "Std."

      - name: Robi filter left pct
        unique_id: robi_filter_left_pct
        state: "{{ (states('sensor.robi_filter_left_fmt') | int(0) / 1.5) | round(0) }}"
        icon: mdi:air-filter
        unit_of_measurement: "%"

      # Sensor dirty
      - name: Robi sensor dirty left fmt
        unique_id: robi_sensor_dirty_left_fmt
        state: "{{ (states('sensor.robi_sensor_dirty_left') | int(0) / 3600) | round(1) }}"
        icon: mdi:eye-outline
        unit_of_measurement: "Std."

      - name: "robi_sensor_pct"
        unique_id: robi_sensor_pct
        state: "{{ (states('sensor.robi_sensor_dirty_left_fmt') | int(0) / 0.3) | round(0) }}"
        icon: mdi:eye-outline
        unit_of_measurement: "%"

      # Statistik #################
      - name: Robi total duration fmt
        unique_id: robi_total_duration_fmt
        state: >-
          {%- set time = states('sensor.robi_total_duration') | int(0) -%}
          {%- set seconds = (time % 60) | int(0) -%}
          {%- set minutes = ((time % 3600) / 60) | int(0) -%}
          {%- set hours = ((time % 86400) / 3600) | int(0) -%}
          {%- set days = (time / 86400) | int(0) -%}
          {{ days }} Tagen {{ '{:02}:{:02}:{:02}'.format(hours, minutes, seconds) }}
        icon: mdi:clock-fast
        unit_of_measurement: ""

      - name: Robi last clean duration fmt
        unique_id: robi_last_clean_duration_fmt
        state: >-
          {%- set time = states('sensor.robi_last_clean_duration') | int(0) -%}
          {%- set seconds = (time % 60) | int(0) -%}
          {%- set minutes = ((time % 3600) / 60) | int(0) -%}
          {%- set hours = ((time % 86400) / 3600) | int(0) -%}
          {{ '{:02}:{:02}:{:02}'.format(hours, minutes, seconds) }}
        icon: mdi:clock-fast
        unit_of_measurement: ""

#   - platform: rest
#     resource: !secret robi_resource_map
#     name: Vacuum Map url
#     value_template: "http://{{states('sensor.robi_ip')}}{{value_json.mapsrc}}"

# Switch ############################################################
switch:
  - platform: template
    switches:
      vacuum:
        friendly_name: "Robi"
        value_template: "{% if is_state('vacuum.robi', 'cleaning') %}On{% else %}Off{% endif %}"
        turn_on:
          service: input_select.select_option
          entity_id: input_select.robi_zone
          data:
            option: "EG"
        turn_off:
          service: vacuum.return_to_base
          data:
            entity_id: vacuum.robi
        icon_template: mdi:robot-vacuum

# input Select ######################################################
input_select:
  robi_fan_speed_list:
    name: Reinigungsmodus
    icon: mdi:fan
    options:
      - Wischen
      - Leise
      - Standart
      - Turbo
      - Maximum

  robi_zone:
    name: Was muss reinigen?
    icon: mdi:map-marker
    options:
      - Raumauswahl
      - EG
      - Küche
      - Wohnzimmer
      - Stube
      - Schlafzimmer
      - Flur
      - HWR
      - WC

# input Boolean #####################################################
input_boolean:
  robi_zone_settings:
    name: View zone settings
    initial: false
    icon: mdi:vector-selection

# input Number ######################################################
input_number:
  robi_passes:
    name: Wie oft?
    initial: 1
    min: 1
    max: 3
    step: 1
    icon: mdi:shuffle-disabled
  robi_start_minutes_weekend:
    name: Start Minute
    initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  robi_start_hour_weekend:
    name: Start Stunde
    initial: 13
    min: 0
    max: 23
    step: 1
    mode: slider
  robi_start_minutes_weekdays:
    name: Start Minute
    initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  robi_start_hour_weekdays:
    name: Start Stunde
    initial: 15
    min: 0
    max: 23
    step: 1
    mode: slider

# Automation ########################################################
automation:
  # If you want to set the vacuum to mop mode, just like the app, here is a script for that:
  #   robi_set_mop:
  #    sequence:
  #      service: vacuum.set_fan_speed
  #      data:
  #        entity_id: vacuum.robi
  #        fan_speed: 105
  # Fan speed 105… Very odd. You will see in the app that mop mode is selected.
  - id: robi_modus
    alias: Robi - Modus
    initial_state: true
    trigger:
      platform: state
      entity_id: input_select.robi_fan_speed_list
    action:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.robi
          fan_speed: >
            {% if trigger.to_state.state == "Leise" %}
              Quiet
            {% elif trigger.to_state.state == "Standart" %}
              Standart
            {% elif trigger.to_state.state == "Turbo" %}
              Turbo
            {% elif trigger.to_state.state == "Maximum" %}
              Max
            {% elif trigger.to_state.state == "Wischen" %}
              105
            {% endif %}

  - id: robi_raumauswahl
    alias: Robi - Raumauswahl
    initial_state: true
    trigger:
      platform: state
      entity_id: input_select.robi_zone
      from: "Raumauswahl"

    action:
      - service: >
          {% if is_state("input_select.robi_zone","EG") %}
            script.robi_home
          {% elif is_state("input_select.robi_zone","Küche") %}
            script.robi_kitchen
          {% elif is_state("input_select.robi_zone","Wohnzimmer") %}
            script.robi_living_room
          {% elif is_state("input_select.robi_zone","Stube") %}
            script.robi_stube
          {% elif is_state("input_select.robi_zone","Schlafzimmer") %}
            script.robi_bedroom
          {% elif is_state("input_select.robi_zone","Flur") %}
            script.robi_flur
          {% elif is_state("input_select.robi_zone","HWR") %}
            script.robi_hwr
          {% elif is_state("input_select.robi_zone","WC") %}
            script.robi_wc
          {% else %}
          {% endif %}

      - wait_template: "{{is_state('vacuum.robi', 'docked')}}"

      - delay: 00:00:15

      - service: input_select.select_option
        entity_id: input_select.robi_zone
        data:
          option: "Raumauswahl"

      - service: input_select.select_option
        entity_id: input_select.robi_fan_speed_list
        data:
          option: "Standart"

  # Планировка запуска в рабочие дни
  - id: robi_schedule_cleaning_on_weekdays
    alias: Robi - Schedule cleaning on weekdays
    initial_state: false
    trigger:
      - platform: template
        value_template: "{{ states('sensor.robi_start_time_weekdays') == states('sensor.time') }}"

    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri

    action:
      - service: vacuum.start
        data:
          entity_id: vacuum.robi

  # Планировка запуска в выходные
  - id: robi_schedule_cleaning_on_weekends
    alias: Robi - Schedule cleaning on weekends
    initial_state: false
    trigger:
      - platform: template
        value_template: "{{ states('sensor.robi_start_time_weekend') == states('sensor.time') }}"

    condition:
      - condition: time
        weekday:
          - sat
          - sun

    action:
      - service: vacuum.start
        data:
          entity_id: vacuum.robi

  # Notifictaion ##############
  - id: robi__notify
    alias: Robi - Notify
    mode: parallel
    trigger:
      - platform: state
        entity_id: vacuum.robi

    condition:
      condition: and
      conditions:
        - "{{ trigger.to_state.state != trigger.from_state.state }}"
        - "{{ trigger.from_state.state != 'unavailable' }}"
        - "{{ trigger.to_state.state != 'unavailable' }}"

    action:
      - service: notify.telegram_schick_home
        data:
          title: 🐁 Robi
          message: "{{ states('vacuum.robi') }}, {{ state_attr('vacuum.robi','status') }}, {{ trigger.to_state.state }} <- {{ trigger.from_state.state }}"

# ZONE ##############################################################
# Küche oben links - Area: Süd, Ost, Nord, West [left, bottom, right, top]
# Ladestation 25500, 25500
# ===================================================================
# Küche: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[21000, 29500, 23200, 33100, 1]]}
# Wohnzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[23000, 29300, 30000, 34200, 1]]}
# Stube: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 29300, 30000, 35000, 1]]}
# Schlafzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[26500, 24500, 30000, 29300, 1]]}
# Flur: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[23100, 24500, 26000, 29200, 1]]}
# HWR: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 26500, 22500, 29200, 1]]}
# WC: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 24500, 23000, 26500, 1]]}

# Küche unten rechts - Area: Nord, West, Süd, Ost [left, bottom, right, top]
# Ladestation 25500, 25500
# ===================================================================
# EG: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 31000, 26500, 1]]}
# Küche: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[28000, 16800, 31000, 21950, 1]]}
# Wohnzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 28100, 21950, 1]]}
# Stube: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 31000, 21950, 1]]}
# Schlafzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 22000, 25100, 26500, 1]]}
# Flur: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[25100, 21940, 27850, 26500, 1]]}
# HWR: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[27830, 21940, 31000, 24400, 1]]}
# WC: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[27820, 24500, 31000, 26500, 1]]}
# ===================================================================
# service: vacuum.send_command
#   entity_id: vacuum.robi
#   command: app_goto_target
#   params: [24500,29500]
#   params: [(север->юг) слева направо - убывает, (восток->запад) сверху вниз - возрастает]

# Script ############################################################
script:
  robi_home:
    alias: Robi - Reinigen
    icon: mdi:floor-plan
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[5000, 5000, 50000, 50000]]
    #     zone: [[20800, 16000, 31000, 26500]]
    # - service: script.robi_alert_start

  robi_kitchen:
    alias: Robi - Küche reinigen
    icon: mdi:silverware-fork-knife
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[28000, 16800, 31000, 21700]]
    #     zone: [[20000, 29500, 23200, 34200]]
    # - service: script.robi_alert_start

  robi_living_room:
    alias: Robi - Wohnzimmer reinigen
    icon: mdi:sofa
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[20800, 16000, 28100, 21950]]
    #     zone: [[23000, 29300, 30000, 35000]]
    # - service: script.robi_alert_start

  robi_stube:
    alias: Robi - Stube reinigen
    icon: mdi:broom
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[20800, 16000, 31000, 21700]]
    #     zone: [[20000, 29300, 30000, 35000]]
    # - service: script.robi_alert_start

  robi_bedroom:
    alias: Robi - Schlafzimmer reinigen
    icon: mdi:bed-empty
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[20800, 22000, 25100, 26500]]
    #     zone: [[26500, 23500, 30000, 29300]]
    # - service: script.robi_alert_start

  robi_flur:
    alias: Robi - Flur reinigen
    icon: mdi:broom
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[25100, 21940, 27850, 26500]]
    #     zone: [[23100, 23500, 26000, 29200]]
    # - service: script.robi_alert_start

  robi_hwr:
    alias: Robi - HWR reinigen
    icon: mdi:broom
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          params: [[27830, 21940, 31000, 24400]]
    #     params: [[20000, 26500, 22500, 29200]]
    # - service: script.robi_alert_start

  robi_wc:
    alias: Robi - WC reinigen
    icon: mdi:broom
    sequence:
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: [[27820, 24500, 31000, 26500]]
    #     zone: [[20000, 23500, 23000, 26500]]
    # - service: script.robi_alert_start

  robi_ort:
    alias: Robi - Komm mal her
    icon: mdi:shoe-print
    sequence:
      - service: xiaomi_miio.vacuum_goto
        data:
          entity_id: vacuum.robi
          x_coord: 24500
          y_coord: 20300
    # - service: script.robi_alert_start
# Alerts ############################################################
#  robi_alert_start:
#    alias: Vacuum alert start
#    sequence:
#    - service: notify.avitelegram
#      data:
#        title: "House alert"
#        message: "The robot has started cleaning the area: {{ states('input_select.robi_zone') | lower }}."
#    - service: notify.avitelegram
#      data:
#        title: "House alert ({{now().strftime('%H:%M')}})"
#        message: "The robot has started cleaning the area: {{ states('input_select.robi_zone') | lower }}"
#
#  robi_alert_pause:
#    alias: Vacuum alert pausa
#    sequence:
#    - service: notify.avitelegram
#      data:
#        title: "House alert"
#        message: "The vacuum cleaner has stopped cleaning the area: {{ states('input_select.robi_zone') | lower }}. {% if 'error' in states('vacuum.robi') %}Error code: {{ state_attr('vacuum.robi','error') }}.{% else %}{% endif %}"
#    - service: notify.avitelegram
#      data:
#        title: "House alert ({{now().strftime('%H:%M')}})"
#        message: "The vacuum cleaner has stopped cleaning the area: {{ states('input_select.robi_zone') | lower }}. {% if 'error' in states('vacuum.robi') %}Error code: {{ state_attr('vacuum.robi','error') }}.{% else %}{% endif %}"
#
#  robi_alert_back_to_home:
#    alias: Vacuum alert back to home
#    sequence:
#    - condition: template
#      value_template: "{% if is_state('input_select.robi_zone', 'Choose the area') %}False{% else %}True{% endif %}"
#    - service: notify.avitelegram
#      data:
#        title: "House alert"
#        message: "The robot has finished cleaning the area {{ states('input_select.robi_zone') | lower }}. cleaned {{ state_attr('vacuum.robi','cleaned_area') }} square meters in {{ state_attr('vacuum.robi','cleaning_time') }} minutes and now it is loading"
#    - service: notify.avitelegram
#      data:
#        title: "House alert ({{now().strftime('%H:%M')}})"
#        message: "The robot has finished cleaning the area {{ states('input_select.robi_zone') | lower }}. cleaned {{ state_attr('vacuum.robi','cleaned_area') }} square meters in {{ state_attr('vacuum.robi','cleaning_time') }} minutes and now it is loading."
#
#  robi_alert_error:
#    alias: Vacuum alert error
#    sequence:
#    - service: notify.avitelegram
#      data:
#        title: "House alert"
#        message: "The vacuum cleaner stopped and reported an error while cleaning the area {{ states('input_select.robi_zone') | lower }}."
#    - service: notify.avitelegram
#      data:
#        title: "House alert ({{now().strftime('%H:%M')}})"
#        message: "The vacuum cleaner stopped and reported an error while cleaning the area {{ states('input_select.robi_zone') | lower }}."
#
# Camera ############################################################
#camera:
#  - platform: generic
#    name: Vacuum map
#    still_image_url: "{{ states('sensor.robi_map_url') }}"
#    verify_ssl: false
#    content_type: image/png
#    framerate: 1
