# Worx Landroid (M500 WR141E) package

# Input boolean #####################################################
input_boolean:
  mower_views_switch:
    name: Mower - Views switch
    initial: false
    icon: mdi:dip-switch

# Automations #######################################################
automation:
  - id: mower_notify_status
    alias: Mower status notification
    initial_state: false
    triggers:
      - trigger: state
        # entity_id: vacuum.mower
        entity_id: lawn_mower.mower

    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"

    actions:
      - action: notify.telegram_schick_home
        data:
          title: üèéÔ∏è Lanroid M500
          message: "*{{ trigger.to_state.state }}* <- {{ trigger.from_state.state }}"

    #  - action: persistent_notification.create
    #    data:
    #      title: üèéÔ∏è Lanroid M500
    #      message: "{{ trigger.from_state.state }} -> {{ trigger.to_state.state }} - {{ states('sensor.date_time') }}"

  - id: mower_notify_error
    alias: Mower error notification
    initial_state: true
    triggers:
      #   - trigger: state
      #     entity_id: vacuum.mower
      #     attribute: error
      - trigger: template
        value_template: "{{ states('sensor.mower_error') }}"
        # value_template: "{{ state_attr('vacuum.mower','error')['id'] }}"

    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"

    actions:
      - action: notify.telegram_schick_home
        data:
          title: üèéÔ∏è Lanroid M500
          message: >-
            *{{ trigger.to_state.state }}: {{ states('sensor.mower_error') }}*
            <- {{ trigger.from_state.state }}: {{ states('sensor.mower_error') }}
          # *{{ trigger.to_state.state }}: {{ state_attr('vacuum.mower','error')['description'] }}*
          # <- {{ trigger.from_state.state }}: {{ state_attr('vacuum.mower','error')['description'] }}

    #  - action: persistent_notification.create
    #    data:
    #      title: üèéÔ∏è Lanroid M500
    #      message: "{{ trigger.from_state.state }} -> {{ trigger.to_state.state }} - {{ states('sensor.date_time') }}"

# Customize #########################################################
homeassistant:
  customize:
    # Input Booleans #####
    input_boolean.mower_views_switch:
      friendly_name: Konfiguration

    # Automations ########
    automation.mower_notify_status:
      friendly_name: Mower - Statusbenachrichtigung
      icon: mdi:bell
    automation.mower_notify_error:
      friendly_name: Mower - Fehlerbenachrichtigung
      icon: mdi:bell
# Scripts ###########################################################
# Services
# landroid_cloud.start
# landroid_cloud.home
# landroid_cloud.pause
# landroid_cloud.configure landroid_cloud.config (can be used to set rain delay and time extension)
# landroid_cloud.partymode (if a partymode capable device was found)
# landroid_cloud.setzone
# landroid_cloud.lock
# landroid_cloud.restart
# landroid_cloud.edgecut (only for models with the function available in the app)

# Error #####################
# 0=kein Fehler
# 1=M√§her festgefahren
# 2=M√§her angehoben
# 3=Draht fehlt
# 4=ausserh. der Begrenzung
# 5=wegen Regen gestoppt
# 8=Fehler Messermotor
# 9=Fehler Fahrmotor
# 11=M√§her umgekippt
# 12=Akku leer
# 13=Draht vertauscht
# 14=Akku Ladefehler
# 15=Station n. gefunden
# 16=M√§her gesperrt
# 17=Akkutemp. zu hoch

# Status ####################
# 0=In Station (Idle) Manueller Stop??
# 1=In Station (Home)
# 2=startet
# 3=f√§hrt raus
# 4=f√§hrt am Draht entlang
# 5=sucht die Station
# 6=sucht Begrenzungsdraht
# 7=M√§hen
# 8=wurde angehoben
# 9=hat ein grobes Problem
# 10=M√§hwerk blockiert
# 11=Debug
# 30=Heimfahrt
# 32=Kantenschnitt
# 33=Suche M√§hbereich
# 34=Pause / gestoppt
