# Xiaomi Roborock S50

# Integration
# vacuum:
#   - platform: xiaomi_miio
#     name: "Robi"
#     host: !secret robi_ip
#     token: !secret robi_token

# Recorder
recorder:
  exclude:
    entities:
      - input_select.robi_fan_speed_list
      - input_select.robi_zone
      - input_boolean.robi_zone_settings
      - input_number.robi_passes
      - input_number.robi_start_minutes_weekend
      - input_number.robi_start_hour_weekend
      - input_number.robi_start_minutes_weekdays
      - input_number.robi_start_hour_weekdays

# Logbook
logbook:
  exclude:
    entities:
      - input_select.robi_fan_speed_list
      - input_select.robi_zone
      - input_boolean.robi_zone_settings
      - input_number.robi_passes
      - input_number.robi_start_minutes_weekend
      - input_number.robi_start_hour_weekend
      - input_number.robi_start_minutes_weekdays
      - input_number.robi_start_hour_weekdays

homeassistant:
  customize:
    # Sensors
    sensor.robi_battery:
      friendly_name: "Robi - Akku"
    sensor.robi_main_brush_pct:
      friendly_name: "Robi - Hauptb√ºrste (percent)"
    sensor.robi_side_brush_pct:
      friendly_name: "Robi - Seitenb√ºrste (percent)"
    sensor.robi_filter_pct:
      friendly_name: "Robi - Filter (percent)"
    sensor.robi_sensor_pct:
      friendly_name: "Robi - Sensoren (percent)"
    sensor.robi_total_cleaned_time:
      friendly_name: "Dauer (insg.)"

# Camera
# camera:
# - platform: xiaomi_cloud_map_extractor
#   host: !secret robi_ip
#   token: !secret robi_token
#   username: !secret xiaomi_email
#   password: !secret xiaomi_password
#   draw: ["all"]
#   attributes:
#     - calibration_points

# - platform: generic
#   name: Vacuum map
#   still_image_url: "{{ states('sensor.robi_map_url') }}"
#   verify_ssl: false
#   content_type: image/png
#   framerate: 1

# Sensor
template:
  - sensor:
      # Accesories
      - name: Robi - Main brush pct
        unique_id: robi_main_brush_pct
        state: "{{ (states('sensor.robi_main_brush_remaining') | int(0) / 3) | round(0) }}"
        icon: mdi:broom
        unit_of_measurement: "%"

      # Side brush
      - name: "Robi - Side brush pct"
        unique_id: robi_side_brush_pct
        state: "{{ (states('sensor.robi_side_brush_remaining') | int(0) / 2) | round(0) }}"
        icon: mdi:multiplication
        unit_of_measurement: "%"

      # Filter
      - name: Robi - Filter pct
        unique_id: robi_filter_pct
        state: "{{ (states('sensor.robi_filter_remaining') | int(0) / 1.5) | round(0) }}"
        icon: mdi:air-filter
        unit_of_measurement: "%"

      # Sensor dirty
      - name: "Robi - Sensor pct"
        unique_id: robi_sensor_pct
        state: "{{ (states('sensor.robi_sensor_dirty_remaining') | int(0) / 0.3) | round(0) }}"
        icon: mdi:eye-outline
        unit_of_measurement: "%"

      # Statistik #################
      - name: Robi - Total duration fmt
        unique_id: robi_total_duration_fmt
        state: >-
          {%- set time = states('sensor.robi_total_duration') | int(0) -%}
          {%- set seconds = (time % 60) | int(0) -%}
          {%- set minutes = ((time % 3600) / 60) | int(0) -%}
          {%- set hours = ((time % 86400) / 3600) | int(0) -%}
          {%- set days = (time / 86400) | int(0) -%}
          {{ days }} Tagen {{ '{:02}:{:02}:{:02}'.format(hours, minutes, seconds) }}
        icon: mdi:clock-fast

      - name: Robi - Last clean duration fmt
        unique_id: robi_last_clean_duration_fmt
        state: >-
          {%- set time = states('sensor.robi_last_clean_duration') | int(0) -%}
          {%- set seconds = (time % 60) | int(0) -%}
          {%- set minutes = ((time % 3600) / 60) | int(0) -%}
          {%- set hours = ((time % 86400) / 3600) | int(0) -%}
          {{ '{:02}:{:02}:{:02}'.format(hours, minutes, seconds) }}
        icon: mdi:clock-fast

    # - platform: rest
    #   resource: !secret robi_resource_map
    #   name: Vacuum Map url
    #   value_template: "http://{{states('sensor.robi_ip')}}{{value_json.mapsrc}}"

# Switch
switch:
  - platform: template
    switches:
      vacuum:
        friendly_name: "Robi"
        unique_id: robi_switch
        value_template: "{% if is_state('vacuum.robi', 'cleaning') %}On{% else %}Off{% endif %}"
        icon_template: mdi:robot-vacuum
        turn_on:
          action: input_select.select_option
          entity_id: input_select.robi_zone
          data:
            option: "EG"
        turn_off:
          action: vacuum.return_to_base
          data:
            entity_id: vacuum.robi

# input Select
input_select:
  robi_fan_speed_list:
    name: Robi - Reinigungsmodus
    icon: mdi:fan
    options:
      - Leise
      - Standard
      - Medium
      - Turbo
      - Sanft
      - Auto

  robi_zone:
    name: Robi - Was muss reinigen?
    icon: mdi:map-marker
    options:
      - Raumauswahl
      - EG
      - K√ºche
      - Wohnzimmer
      - Stube
      - Schlafzimmer
      - Flur
      - HWR
      - WC

# input Boolean
input_boolean:
  robi_zone_settings:
    name: Robi - Zonenreinigung anzeigen
    initial: false
    icon: mdi:vector-selection

  robi_info_toggle:
    name: Robi - Informationen anzeigen
    initial: false
    icon: mdi:information

  robi_filter_usage_toggle:
    name: Robi - Filternutzung anzeigen
    initial: false
    icon: mdi:air-filter

# input Number
input_number:
  robi_passes:
    name: Robi - Wie oft?
    initial: 1
    min: 1
    max: 3
    step: 1
    icon: mdi:shuffle-disabled

# input Datetime
input_datetime:
  robi_start_weekdays:
    name: Robi - Reinigungsbegin an Wochentagen
    has_time: true
    icon: mdi:clock-start

  robi_start_weekends:
    name: Robi - Reinigungsbegin am Wochenende
    has_time: true
    icon: mdi:clock-start

# Automation ########################################################
automation:
  # If you want to set the vacuum to mop mode, just like the app, here is a script for that:
  #   robi_set_mop:
  #    sequence:
  #      action: vacuum.set_fan_speed
  #      data:
  #        entity_id: vacuum.robi
  #        fan_speed: 105
  # Fan speed 105‚Ä¶ Very odd. You will see in the app that mop mode is selected.
  - id: robi_modus
    alias: Robi - Modus
    initial_state: true
    triggers:
      trigger: state
      entity_id: input_select.robi_fan_speed_list
    actions:
      - action: vacuum.set_fan_speed
        target:
          entity_id: vacuum.robi
        data:
          fan_speed: >-
            {% set speeds = {
              'Leise':'Silent',
              'Standard':'Standard',
              'Medium':'Medium',
              'Turbo':'Turbo',
              'Sanft':'Gentle',
              'Auto':'Auto',
              }
            %}
            {{ iif(trigger.to_state.state in speeds, speeds[trigger.to_state.state], 'Turbo') }}

  - id: robi_raumauswahl
    alias: Robi - Raumauswahl
    initial_state: true
    triggers:
      trigger: state
      entity_id: input_select.robi_zone
      from: "Raumauswahl"

    actions:
      - action: >
          {% if is_state("input_select.robi_zone","EG") %}
            script.robi_home
          {% elif is_state("input_select.robi_zone","K√ºche") %}
            script.robi_kitchen
          {% elif is_state("input_select.robi_zone","Wohnzimmer") %}
            script.robi_living_room
          {% elif is_state("input_select.robi_zone","Stube") %}
            script.robi_stube
          {% elif is_state("input_select.robi_zone","Schlafzimmer") %}
            script.robi_bedroom
          {% elif is_state("input_select.robi_zone","Flur") %}
            script.robi_flur
          {% elif is_state("input_select.robi_zone","HWR") %}
            script.robi_hwr
          {% elif is_state("input_select.robi_zone","WC") %}
            script.robi_wc
          {% else %}
          {% endif %}

      - wait_template: "{{is_state('vacuum.robi', 'docked')}}"

      - delay: 00:00:15

      - action: input_select.select_option
        entity_id: input_select.robi_zone
        data:
          option: "Raumauswahl"

      - action: input_select.select_option
        entity_id: input_select.robi_fan_speed_list
        data:
          option: "Turbo"

  # –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
  - id: robi_schedule_cleaning_on_weekdays
    alias: Robi - Schedule cleaning on weekdays
    initial_state: false
    triggers:
      - trigger: time
        at: input_datetime.robi_start_weekdays

    conditions:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri

    actions:
      - action: vacuum.start
        data:
          entity_id: vacuum.robi

  # –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
  - id: robi_schedule_cleaning_on_weekends
    alias: Robi - Schedule cleaning on weekends
    initial_state: false
    triggers:
      - trigger: time
        at: input_datetime.robi_start_weekends

    conditions:
      - condition: time
        weekday:
          - sat
          - sun

    actions:
      - action: vacuum.start
        data:
          entity_id: vacuum.robi

  # Notifictaion ##############
  - id: robi__notify
    alias: Robi - Notify
    mode: parallel
    triggers:
      - trigger: state
        entity_id: vacuum.robi

    conditions:
      condition: and
      conditions:
        - "{{ trigger.to_state.state != trigger.from_state.state }}"
        - "{{ trigger.from_state.state != 'unavailable' }}"
        - "{{ trigger.to_state.state != 'unavailable' }}"

    actions:
      - action: notify.telegram_schick_home
        data:
          title: üêÅ Robi
          message: "{{ state_attr('vacuum.robi','status') }} <- {{ trigger.from_state.state }}"
          # message: "{{ states('vacuum.robi') }}, {{ state_attr('vacuum.robi','status') }}, {{ trigger.to_state.state }} <- {{ trigger.from_state.state }}"

# K√ºche oben links - Area: S√ºd, Ost, Nord, West [left, bottom, right, top]
# –í–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç: (—é–≥->—Å–µ–≤–µ—Ä) —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, (–≤–æ—Å—Ç–æ–∫->–∑–∞–ø–∞–¥) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö]
# Ladestation 25500, 25500
# ===================================================================
# K√ºche: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 29500, 23200, 33400, 1]]}
# Wohnzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[23154, 29280, 31000, 36000, 1]]}
# Stube: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 29280, 31000, 36000, 1]]}
# Schlafzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[26130, 24000, 31000, 29200, 1]]}
# Flur: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[23100, 24000, 26330, 29300, 1]]}
# HWR: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 26400, 23510, 29320, 1]]}
# WC: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20000, 24000, 23510, 26860, 1]]}

# K√ºche unten rechts - Area: Nord, West, S√ºd, Ost [left, bottom, right, top]
# Ladestation 25500, 25500
# ===================================================================
# EG: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 31000, 26500, 1]]}
# K√ºche: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[28000, 16800, 31000, 21990, 1]]}
# Wohnzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 28100, 21990, 1]]}
# Stube: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 16000, 31000, 21990, 1]]}
# Schlafzimmer: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[20800, 22000, 25100, 26500, 1]]}
# Flur: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[25100, 21940, 27850, 26500, 1]]}
# HWR: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[27830, 21940, 31000, 24400, 1]]}
# WC: {"entity_id": "vacuum.robi", "command": "app_zoned_clean","params": [[27820, 24500, 31000, 26500, 1]]}
# ===================================================================
# action: vacuum.send_command
#   entity_id: vacuum.robi
#   command: app_goto_target
#   params: [24500,29500]
#   params: [(—Å–µ–≤–µ—Ä->—é–≥) —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ - —É–±—ã–≤–∞–µ—Ç, (–≤–æ—Å—Ç–æ–∫->–∑–∞–ø–∞–¥) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ - –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç]

# Script ############################################################
script:
  robi_vacuum:
    alias: Robi - Reinigen
    icon: mdi:floor-plan
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        target:
          entity_id: vacuum.robi
        data:
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          zone: >-
            {% set zones = {
              'EG':'[[5000, 5000, 50000, 50000]]',
              'K√ºche':'[[28000, 16800, 31000, 21990]]',
              'Wohnzimmer':'[[20800, 16000, 28100, 21990]]',
              'Stube':'[[20800, 16000, 31000, 21990]]',
              'Schlafzimmer':'[[20800, 22000, 25100, 26500]]',
              'Flur':'[[25100, 21940, 27850, 26500]]',
              'HWR':'[[27830, 21940, 31000, 24400]]',
              'WC':'[[27820, 24500, 31000, 26500]]',
              }
            %}
            {{ iif(zone in zones, zones[zone], '[[5000, 5000, 50000, 50000]]') }}
          # zone: >-
          #   {% set zones = {
          #     'EG':'[[5000, 5000, 50000, 50000]]',
          #     'K√ºche':'[[20000,29500,23200,33400]]',
          #     'Wohnzimmer':'[[23154,29280,31000,36000]]',
          #     'Stube':'[[20000,29280,31000,36000]]',
          #     'Schlafzimmer':'[[26130, 24000, 31000, 29200]]',
          #     'Flur':'[[23100, 24000, 26330, 29300]]',
          #     'HWR':'[[20000, 26400, 23510, 29320]]',
          #     'WC':'[[20000, 24000, 23510, 26860]]',
          #     }
          #   %}

  robi_home:
    alias: Robi - Reinigen
    icon: mdi:floor-plan
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[20000, 24000, 31000, 36000]]
          zone: [[5000, 5000, 50000, 50000]]
    # - action: script.robi_alert_start

  robi_kitchen:
    alias: Robi - K√ºche reinigen
    icon: mdi:silverware-fork-knife
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[20000, 29500, 23200, 33400]]
          zone: [[28000, 16800, 31000, 21990]]
    # - action: script.robi_alert_start

  robi_living_room:
    alias: Robi - Wohnzimmer reinigen
    icon: mdi:sofa
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[23154, 29280, 31000, 36000]]
          zone: [[20800, 16000, 28100, 21990]]
    # - action: script.robi_alert_start

  robi_stube:
    alias: Robi - Stube reinigen
    icon: mdi:broom
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[20000, 29280, 31000, 36000]]
          zone: [[20800, 16000, 31000, 21990]]
    # - action: script.robi_alert_start

  robi_bedroom:
    alias: Robi - Schlafzimmer reinigen
    icon: mdi:bed-empty
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[26130, 24000, 31000, 29200]]
          zone: [[20800, 22000, 25100, 26500]]
    # - action: script.robi_alert_start

  robi_flur:
    alias: Robi - Flur reinigen
    icon: mdi:stairs
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[23100, 24000, 26330, 29300]]
          zone: [[25100, 21940, 27850, 26500]]
    # - action: script.robi_alert_start

  robi_hwr:
    alias: Robi - HWR reinigen
    icon: mdi:washing-machine
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[20000, 26400, 23510, 29320]]
          zone: [[27830, 21940, 31000, 24400]]
    # - action: script.robi_alert_start

  robi_wc:
    alias: Robi - WC reinigen
    icon: mdi:toilet
    sequence:
      - action: xiaomi_miio.vacuum_clean_zone
        data:
          entity_id: vacuum.robi
          repeats: "{{ states('input_number.robi_passes') | int(0) }}"
          # zone: [[20000, 24000, 23510, 26860]]
          zone: [[27820, 24500, 31000, 26500]]
    # - action: script.robi_alert_start

  robi_ort:
    alias: Robi - Komm mal her
    icon: mdi:shoe-print
    sequence:
      - action: xiaomi_miio.vacuum_goto
        data:
          entity_id: vacuum.robi
          x_coord: 24500
          y_coord: 20300
    # - action: script.robi_alert_start
# Alerts
# robi_alert_start:
#   alias: Vacuum alert start
#   sequence:
#   - action: notify.avitelegram
#     data:
#       title: "House alert"
#       message: "The robot has started cleaning the area: {{ states('input_select.robi_zone') | lower }}."
#   - action: notify.avitelegram
#     data:
#       title: "House alert ({{now().strftime('%H:%M')}})"
#       message: "The robot has started cleaning the area: {{ states('input_select.robi_zone') | lower }}"

# robi_alert_pause:
#   alias: Vacuum alert pausa
#   sequence:
#   - action: notify.avitelegram
#     data:
#       title: "House alert"
#       message: "The vacuum cleaner has stopped cleaning the area: {{ states('input_select.robi_zone') | lower }}. {% if 'error' in states('vacuum.robi') %}Error code: {{ state_attr('vacuum.robi','error') }}.{% else %}{% endif %}"
#   - action: notify.avitelegram
#     data:
#       title: "House alert ({{now().strftime('%H:%M')}})"
#       message: "The vacuum cleaner has stopped cleaning the area: {{ states('input_select.robi_zone') | lower }}. {% if 'error' in states('vacuum.robi') %}Error code: {{ state_attr('vacuum.robi','error') }}.{% else %}{% endif %}"

# robi_alert_back_to_home:
#   alias: Vacuum alert back to home
#   sequence:
#   - condition: template
#     value_template: "{% if is_state('input_select.robi_zone', 'Choose the area') %}False{% else %}True{% endif %}"
#   - action: notify.avitelegram
#     data:
#       title: "House alert"
#       message: "The robot has finished cleaning the area {{ states('input_select.robi_zone') | lower }}. cleaned {{ state_attr('vacuum.robi','cleaned_area') }} square meters in {{ state_attr('vacuum.robi','cleaning_time') }} minutes and now it is loading"
#   - action: notify.avitelegram
#     data:
#       title: "House alert ({{now().strftime('%H:%M')}})"
#       message: "The robot has finished cleaning the area {{ states('input_select.robi_zone') | lower }}. cleaned {{ state_attr('vacuum.robi','cleaned_area') }} square meters in {{ state_attr('vacuum.robi','cleaning_time') }} minutes and now it is loading."

# robi_alert_error:
#   alias: Vacuum alert error
#   sequence:
#   - action: notify.avitelegram
#     data:
#       title: "House alert"
#       message: "The vacuum cleaner stopped and reported an error while cleaning the area {{ states('input_select.robi_zone') | lower }}."
#   - action: notify.avitelegram
#     data:
#       title: "House alert ({{now().strftime('%H:%M')}})"
#       message: "The vacuum cleaner stopped and reported an error while cleaning the area {{ states('input_select.robi_zone') | lower }}."
