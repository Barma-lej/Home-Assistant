# Manage a surveillance system

scene:
  - id: "Camera - Detection on"
    name: camera_detection_on
    icon: mdi:cctv
    entities:
      switch.einfahrt_ftp_upload: "on"
      switch.einfahrt_push_notifications: "on"
      switch.einfahrt_record: "on"
      switch.einfahrt_record_audio: "on"
      switch.garage_ftp_upload: "on"
      switch.garage_push_notifications: "on"
      switch.garage_record: "on"
      switch.garage_record_audio: "on"
      # switch.innen_ftp_upload: "on"
      # switch.innen_push_notifications: "on"
      # switch.innen_record: "on"
      # switch.innen_record_audio: "on"
      switch.terrasse_ftp_upload: "on"
      switch.terrasse_push_notifications: "on"
      switch.terrasse_record: "on"
      switch.terrasse_record_audio: "on"
      switch.alfa03: "on"

# Automations
automation:
  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
  - id: camera_upload_to_telegram
    alias: Camera - Upload to Telegram
    description: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
    mode: parallel
    max: 10 # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

    triggers:
      - trigger: event
        event_type: folder_watcher
        event_data:
          event_type: closed

    conditions:
      - condition: template
        value_template: "{{ 'cams' in trigger.event.data.path }}"

    variables:
      file_path: "{{ trigger.event.data.path }}"
      folder_name: "{{ trigger.event.data.folder }}"
      is_video: "{{ file_path.endswith('.mp4') and not file_path.endswith('e.mp4') }}"
      is_converted_video: "{{ file_path.endswith('e.mp4') }}"
      is_image: "{{ file_path.endswith('.jpg') }}"
      common_prompt: "–û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏/–≤–∏–¥–µ–æ. –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –º–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ. –ï—Å–ª–∏ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª. –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ –æ–ø–∏—à–∏ —Ç–∞–∫–∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–¥—Ä–∞. –ù–µ –æ–ø–∏—Å—ã–≤–∞–π –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ –∑–¥–∞–Ω–∏—è."
      # –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      einfahrt_uid: !secret einfahrt_uid
      terrasse_uid: !secret terrasse_uid
      garage_uid: !secret garage_uid
      einfahrt_prompt: !secret einfahrt_prompt
      terrasse_prompt: !secret terrasse_prompt

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
      camera_info: >
        {% if 'einfahrt' in folder_name %}
          {{ {'icon': 'üè†', 'name': 'Einfahrt', 'uid': einfahrt_uid, 'prompt': einfahrt_prompt} }}
        {% elif 'terrasse' in folder_name %}
          {{ {'icon': 'üè°', 'name': 'Terrasse', 'uid': terrasse_uid, 'prompt': terrasse_prompt} }}
        {% elif 'garage' in folder_name %}
          {{ {'icon': 'üöó', 'name': 'Garage', 'uid': garage_uid} }}
        {% else %}
          {{ {'icon': 'üèÉ', 'name': folder_name | title} }}
        {% endif %}

      # Reolink intent URI –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      reolink_intent_uri: >
        {% if camera_info.uid != null %}
          intent:#Intent;launchFlags=0x14000000;component=com.mcu.reolink/com.android.bc.login.WelcomeActivity;S.UID={{ camera_info.uid }};S.ALMTIME={{now().isoformat()}};S.ALMNAME=Detection;S.DEVNAME=DontCare;S.ALMTYPE=PEOPLE;S.ALMCHN=1;end
        {% else %}
          app://com.mcu.reolink
        {% endif %}

    actions:
      - choose:
          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
          - conditions:
              - "{{ is_video }}"
            sequence:
              - action: shell_command.cam_convert
                data:
                  file_in: "{{ file_path }}"
                  file_out: "{{ file_path[:-4] }}e.mp4"

          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
          - conditions:
              - "{{ is_converted_video }}"
            sequence:
              - action: notify.telegram_schick_home
                data:
                  title: "{{ camera_info.name }}"
                  message: "Bewegung erkannt!"
                  data:
                    video:
                      - file: "{{ file_path }}"
                        caption: "{{ camera_info.icon }} *{{ camera_info.name }}*"
                        timeout: 1000

              # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
              - action: shell_command.cam_remove_file
                data:
                  file_in: "{{ file_path[:-5] }}.mp4"

              # AI –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ —Å –ø—Ä–æ–º–ø—Ç–æ–º
              - if:
                  - "{{ camera_info.prompt != null }}"
                then:
                  - action: google_generative_ai_conversation.generate_content
                    data:
                      prompt: "{{ camera_info.prompt }} {{ common_prompt }}"
                      filenames:
                        - "{{ file_path }}"
                    response_variable: response
                  - action: notify.mobile_app_as25
                    data:
                      message: "{{ response.text }}"
                      title: "{{ camera_info.name }}"
                      data:
                        video: "/media/nuc{{ file_path[16:] }}"
                        url: "/lovelace/cams"
                        priority: high
                        actions:
                          - action: URI
                            title: HAss
                            uri: "/lovelace/cams"
                          - action: URI
                            title: Reolink
                            uri: "{{ reolink_intent_uri }}"

          # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          - conditions:
              - "{{ is_image }}"
            sequence:
              - action: notify.telegram_schick_home
                data:
                  title: "{{ camera_info.name }}"
                  message: "Bewegung erkannt!"
                  data:
                    photo:
                      - file: "{{ file_path }}"
                        caption: "{{ camera_info.icon }} *{{ camera_info.name }}*"

              # AI –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º
              - if:
                  - "{{ camera_info.prompt != null }}"
                then:
                  - action: google_generative_ai_conversation.generate_content
                    data:
                      prompt: "{{ camera_info.prompt }} {{ common_prompt }}"
                      filenames:
                        - "{{ file_path }}"
                    response_variable: response
                  - action: notify.mobile_app_as25
                    data:
                      message: "{{ response.text }}"
                      title: "{{ camera_info.name }} {{ folder_name }}"
                      data:
                        image: "/media/nuc{{ file_path[16:] }}"
                        url: "/lovelace/cams"
                        priority: high
                        actions:
                          - action: URI
                            title: HAss
                            uri: "/lovelace/cams"
                          - action: URI
                            title: Reolink
                            uri: "{{ reolink_intent_uri }}"

  - id: camera_surveillance_management
    alias: "Camera - Surveillance Management"
    triggers:
      - trigger: state
        entity_id: group.family
        for: "00:04:00"

      - trigger: time_pattern
        minutes: "/15"

    conditions:
      - "{{ (now().hour < 12 or now().hour > 22)
        or is_state('group.family', 'not_home') }}"

    actions:
      - action: scene.turn_on
        target:
          entity_id: scene.camera_detection_on

  # PTZ control with buttons
  - id: camera_ptz_buttons_control
    alias: "Camera - PTZ buttons control"
    triggers:
      trigger: state
      entity_id:
        - button.garage_ptz_up
        - button.garage_ptz_down
        - button.garage_ptz_left
        - button.garage_ptz_right
        - button.garage_ptz_zoom_in
        - button.garage_ptz_zoom_out
        - button.innen_ptz_up
        - button.innen_ptz_down
        - button.innen_ptz_left
        - button.innen_ptz_right
        - button.innen_ptz_zoom_in
        - button.innen_ptz_zoom_out

    actions:
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 000
      - action: button.press
        entity_id: button.garage_ptz_stop
      - action: button.press
        entity_id: button.innen_ptz_stop

# Script
script:
  camera_ptz:
    alias: Camera - PTZ Control
    icon: mdi:arrow-all
    sequence:
      - action: reolink_cctv.ptz_control
        data:
          entity_id: "{{ entity_id }}"
          command: "{{ command }}"

      - delay: "00:00:01"

      - action: reolink_cctv.ptz_control
        data:
          entity_id: "{{ entity_id }}"
          command: STOP

homeassistant:
  customize:
    automation.camera_upload_to_telegram:
      icon: mdi:send
    automation.camera_surveillance_management:
      icon: mdi:cctv
