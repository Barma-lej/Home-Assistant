## Customize #########################################################
#homeassistant:
#  customize:
#    sensor.zone1to4_valve:
#      unit_of_measurement: '%'
#
#    sensor.zone5_valve:
#      unit_of_measurement: '%'

# Automations #######################################################
automation:
  # Set next run time when schedule enabled or time changed ###########
  - id: irrigation_set_next_run_time_when_schedule_enabled_or_time_changed
    alias: Irrigation - Zeitplan bei der Zeitänderung oder Automat Aktivierung
    # initial_state: on
    trigger:
      - platform: state
        entity_id:
          - input_boolean.irrigation_cycle1_enable
          - input_boolean.irrigation_cycle2_enable
        to: "on"

      - platform: state
        entity_id:
          - input_select.irrigation_cycle1_schedule_time
          - input_select.irrigation_cycle2_schedule_time

      - platform: state
        entity_id:
          - input_select.irrigation_cycle1_watering_days
          - input_select.irrigation_cycle2_watering_days

    action:
      - service: input_datetime.set_datetime
        data:
          entity_id: >
            {% if 'cycle1' in trigger.entity_id %}
              input_datetime.irrigation_cycle1_next_run_time
            {% else %}
              input_datetime.irrigation_cycle2_next_run_time
            {% endif %}
          date: >
            {% if 'cycle1' in trigger.entity_id %}
              {% set time = states('input_select.irrigation_cycle1_schedule_time') %}
            {% else %}
              {% set time = states('input_select.irrigation_cycle2_schedule_time') %}
            {% endif %}
            {% if now().strftime('%H:%M') < time %}
              {{ as_timestamp(now()) | timestamp_custom("%Y-%m-%d") }}
            {% else %}
              {{ (as_timestamp(now()) + 24 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% endif %}
          time: >
            {% if 'cycle1' in trigger.entity_id %}
              {{ states('input_select.irrigation_cycle1_schedule_time') }}
            {% else %}
              {{ states('input_select.irrigation_cycle2_schedule_time') }}
            {% endif %}

  # Run irrigation cycles at the right time and on the right days #####
  # Cycle 1 #############################
  - id: irrigation_run_cycle_1
    alias: Irrigation - Start Morgenzyklus
    trigger:
      - platform: time_pattern
        minutes: /15
    #      seconds: '0'

    condition:
      - condition: template
        value_template: "{{ now().strftime('%Y-%m-%d %H:%M:00') == states('input_datetime.irrigation_cycle1_next_run_time') }}"

      - condition: state
        entity_id: input_boolean.irrigation_cycle1_enable
        state: "on"

    action:
      - service: script.irrigation_check_a_sensor_data
        data:
          cycle: "1"

      - service: script.irrigation_update_next_runtime
        data:
          cycle: "1"

  # Cycle 2 #############################
  - id: irrigation_run_cycle_2
    alias: Irrigation - Start Abendzyklus
    #    initial_state: on
    trigger:
      - platform: time_pattern
        minutes: /15
    #      seconds: 00

    condition:
      - condition: template
        value_template: '{{ now().strftime("%Y-%m-%d %H:%M:00") == states("input_datetime.irrigation_cycle2_next_run_time") }}'

      - condition: state
        entity_id: input_boolean.irrigation_cycle2_enable
        state: "on"

    action:
      - service: script.irrigation_check_a_sensor_data
        data:
          cycle: "2"

      - service: script.irrigation_update_next_runtime
        data:
          cycle: "2"

  # Run A Cycle Manually ############################################
  - id: irrigation_run_a_cycle_manually
    alias: Irrigation - Manuell starten
    # initial_state: on
    trigger:
      - platform: state
        entity_id:
          - input_boolean.irrigation_cycle1_manual_run
          - input_boolean.irrigation_cycle2_manual_run
        from: "off"
        to: "on"

    condition:
      # Don't run if the other cycle is already running
      - condition: template
        value_template: >
          {% if trigger.entity_id == 'input_boolean.irrigation_cycle1_manual_run' %}
            {{ states('input_boolean.irrigation_cycle2_running') == 'off' }}
          {% else %}
            {{ states('input_boolean.irrigation_cycle1_running') == 'off' }}
          {% endif %}

    action:
      # Update progress in ui
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "Initialisierung..."

      # Make sure nothing in the system is running
      # Turn off valves
      - service: switch.turn_off
        data:
          entity_id: switch.irrigation_valves

      # - service: homeassistant.turn_off
      #   data:
      #     entity_id: group.irrigation_switches

      # Turn off scripts
      - service: homeassistant.turn_off
        entity_id: script.irrigation_run_a_cycle

      - service: homeassistant.turn_off
        entity_id: script.irrigation_irrigate_a_zone

      # Save the current state of both irrigation_cycle_enable booleans
      - service: >
          {% if is_state('input_boolean.irrigation_cycle1_enable', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.irrigation_cycle1_enable_saved_state

      - service: >
          {% if is_state('input_boolean.irrigation_cycle2_enable', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.irrigation_cycle2_enable_saved_state

      # Disable both programmes
      - service: homeassistant.turn_off
        entity_id:
          - input_boolean.irrigation_cycle1_enable
          - input_boolean.irrigation_cycle2_enable

      # Run a cycle
      - service: script.irrigation_run_a_cycle
        data:
          cycle: >
            {% if trigger.entity_id == 'input_boolean.irrigation_cycle1_manual_run' %}
              1
            {% else %}
              2
            {% endif %}

      # Wait until script is finished
      - wait_template: "{{ is_state('script.irrigation_run_a_cycle', 'off') }}"

      # Turn off both manual run booleans (in case one was turned on while the other was already running)
      - service: homeassistant.turn_off
        entity_id:
          - input_boolean.irrigation_cycle1_manual_run
          - input_boolean.irrigation_cycle2_manual_run

      # Restore the previous state of both irrigation_cycle_enable booleans
      - service: >
          {% if is_state('input_boolean.irrigation_cycle1_enable_saved_state', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.irrigation_cycle1_enable

      - service: >
          {% if is_state('input_boolean.irrigation_cycle2_enable_saved_state', 'on') %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        data:
          entity_id: input_boolean.irrigation_cycle2_enable

  # Cancel A Manual Cycle #############################################
  - id: irrigation_cancel_a_manual_cycle
    alias: Irrigation - Abbrechen manueller Zyklus
    # initial_state: on
    trigger:
      - platform: state
        entity_id:
          - input_boolean.irrigation_cycle1_manual_run
          - input_boolean.irrigation_cycle2_manual_run
        from: "on"
        to: "off"

    action:
      # Turn off valves #####################
      - service: switch.turn_off
        data:
          entity_id: switch.irrigation_valves

      # - service: homeassistant.turn_off
      #   data:
      #     entity_id: group.irrigation_switches

      # Turn off scripts ####################
      - service: homeassistant.turn_off
        entity_id: script.irrigation_run_a_cycle

      - service: homeassistant.turn_off
        entity_id: script.irrigation_irrigate_a_zone

      # Cancel the timer ####################
      - service: timer.cancel
        data:
          entity_id: timer.irrigation_zone_duration

      # Update progress in ui ###############
      - service: homeassistant.turn_off
        data:
          entity_id: >
            {% if trigger.entity_id == 'input_boolean.irrigation_cycle1_manual_run' %}
              input_boolean.irrigation_cycle1_running
            {% else %}
              input_boolean.irrigation_cycle2_running
            {% endif %}

      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "-"

  # Cancel an irrigation if it rains ####
  - id: irrigation_cancel_if_it_rains
    alias: Irrigation - Abbrechen wenn es regnet
    mode: single

    trigger:
      - platform: state
        # entity_id: sensor.landroid_mower_error
        # attribute: error_id
        # to: "5"
        entity_id: vacuum.mower
        attribute: rain_sensor.triggered
        to: "true"

      - platform: template
        value_template: "{{ state_attr('vacuum.mower', 'rain_sensor').triggered == True }}"
        for: "00:01:00"

    action:
      - service: timer.cancel
        entity_id: timer.irrigation_zone_duration

# Scripts ###########################################################
script:
  #######################################
  # Script to check a sensor data
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_check_a_sensor_data:
    alias: Irrigation - Sensorenprüfung
    sequence:
      # Only continue if temperature isn't low
      - condition: template
        value_template: >
          {% if is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on') -%}
            {{ states('sensor.rasen_temperature') >= states('input_number.irrigation_cycle' ~ cycle ~ '_temperature_threshold') }}
          {%- else -%}
            True
          {%- endif %}

      # Only continue if it's no rain
      - condition: template
        value_template: >
          {{ is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'off')
          or (is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on')
          and not state_attr('vacuum.mower', 'rain_sensor').triggered == True) }}
      # and not is_state_attr('sensor.landroid_mower_error', 'error_id', 5)) }}
      - service: script.irrigation_run_a_cycle
        data:
          cycle: "{{ cycle }}"

  #######################################
  # Script to run a cycle
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_run_a_cycle:
    alias: Irrigation - Ein Zyklus starten
    sequence:
      # Only continue if no cycle is running
      - condition: state
        entity_id: "input_boolean.irrigation_cycle1_running"
        state: "off"

      - condition: state
        entity_id: "input_boolean.irrigation_cycle2_running"
        state: "off"

      # Update ui to show cycle is running
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_running

      # Call the script to irrigate zone 1
      - service: script.irrigation_irrigate_a_zone
        data:
          cycle: "{{ cycle }}"
          zone: "1"

      # Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      # Call the script to irrigate zone 2
      - service: script.irrigation_irrigate_a_zone
        data:
          cycle: "{{ cycle }}"
          zone: "2"

      # Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      # Update progress in ui
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "-"

      - service: input_boolean.turn_off
        data:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_running

      # Turn off schedule if run 'Once' selected
      - service: >
          {% if states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Einmal' %}
            input_boolean.turn_off
          {% else %}
            input_boolean.turn_on
          {% endif %}
        data:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_enable

  #######################################
  # Script to irrigate a zone
  # is passed:
  #   {{ cycle }}
  #   {{ zone }}
  #######################################

  irrigation_irrigate_a_zone:
    alias: Irrigation - Bewässerung einer Zone starten
    sequence:
      # Don't continue if switch is unavailable
      - condition: template
        value_template: >
          {{ states('switch.irrigation_zone' ~ zone ~ '_valve') != 'unavailable' }}

      # Don't continue if duration is zero
      - condition: template
        value_template: >
          {% set n = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | int(0) %}
          {{ n != 0 }}

      # Don't continue if moisture is high or temperatur is too low
      - condition: template
        value_template: >
          {% if is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on') -%}
            {{ states('sensor.rasen_moisture') <= states('input_number.irrigation_zone' ~ zone ~ '_moisture_threshold') and
              states('sensor.rasen_temperature') >= states('input_number.irrigation_cycle' ~ cycle ~ '_temperature_threshold') }}
          {%- else -%}
            True
          {%- endif %}

        # Don't continue if it rains (Если дождь пошёл во время полива)
      - condition: template
        value_template: >
          {{ is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'off')
          or (is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on')
          and not state_attr('vacuum.mower', 'rain_sensor').triggered == True) }}
        # and not is_state_attr('sensor.landroid_mower_error', 'error_id', 5)) }}

      # Call the script to set the Tasmota PULSETIME
      - service: script.irrigation_set_tasmota_pulsetime
        data:
          cycle: "{{ cycle }}"
          zone: "{{ zone }}"

      # Wait 2 seconds for good measure to ensure previous zone is completly finished
      - delay: "00:00:02"

      # Update progress in ui ###############
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "{{ zone }}"

      - service: switch.turn_on
        data:
          entity_id: switch.irrigation_zone{{ zone }}_valve

      # Start timer for zone duration #######
      - service: timer.start
        data:
          entity_id: timer.irrigation_zone_duration
          duration: >
            {% set duration = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | float(0) %}
            {% set min = (duration // 1) | round(0, floor) %}
            {% set sec = ((duration - min) * 60) | round %}
            00:{{ '%02i' | format(min) }}:{{ '%02i' | format(sec) }}

      - wait_template: >
          {% set entity = 'timer.irrigation_zone_duration' %}
          {{ is_state(entity , 'idle') }}

      - service: switch.turn_off
        data:
          entity_id: switch.irrigation_zone{{ zone }}_valve

      # Update progress in ui ###############
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "Zonenwechsel..."

      # Be sure the current zone switch is off
      - wait_template: >
          {% set entity = 'switch.irrigation_zone' ~ zone ~ '_valve' %}
          {{ is_state(entity , 'off') }}

  #######################################
  # Script to update next runtime
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_update_next_runtime:
    alias: Irrigation - Zeitplan aktualisieren
    sequence:
      - service: input_datetime.set_datetime
        data:
          entity_id: input_datetime.irrigation_cycle{{ cycle }}_next_run_time
          date: >
            {% if states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Täglich' %}
              {{ (as_timestamp(now() ) + 24 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% elif states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Alle 2 Tage' %}
              {{ (as_timestamp(now() ) + 48 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% elif states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Alle 3 Tage' %}
              {{ (as_timestamp(now() ) + 72 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% else %}
              {{ states('input_datetime.irrigation_cycle' ~ cycle ~ '_next_run_time').split(' ')[0] }}
            {% endif %}
          time: >
            {{ states('input_select.irrigation_cycle' ~ cycle ~ '_schedule_time') }}

  #####################################################################
  # Set Tasmota PULSETIME to 30 seconds longer than the zone runtime
  # is passed:
  #   {{ cycle }}
  #   {{ zone }}
  #
  # This acts as a fail safe in the event of any communication failure
  # between HA and the Sonoff. The Sonoff will switch off under its own
  # control so closing the valve.
  #
  # Note: From the Tasmota wiki, for a Pulsetime greater than 11 seconds
  #       it should be set to 100 + (minutes * 60)
  #####################################################################

  irrigation_set_tasmota_pulsetime:
    alias: Irrigation - Tasmota Timer einstellen
    sequence:
      - service: mqtt.publish
        data:
          topic: >
            {% if zone in [1, 2] %}
              {% set tasmota = 'sonoff4ch' %}
            {% endif %}
            {{ tasmota }}/cmnd/pulsetime{{ zone | string}}
          payload: >
            {% set duration = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | float(0) %}
            {% set payload = 100 + (duration * 60) + 30 %}
            {{ payload | int(0) }}
      # Set pump
      - service: mqtt.publish
        data:
          topic: sonoff4ch/cmnd/pulsetime4
          payload: >
            {% set duration = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | float(0) %}
            {% set payload = 100 + (duration * 60) + 30 %}
            {{ payload | int(0) }}
