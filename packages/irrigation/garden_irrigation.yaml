## Customize ################
#homeassistant:
#  customize:
#    sensor.zone1to4_valve:
#      unit_of_measurement: '%'
#
#    sensor.zone5_valve:
#      unit_of_measurement: '%'

# Define common conditions as anchors
common_conditions: &cycle_conditions
  - condition: state
    entity_id: input_boolean.irrigation_master_control_switch
    state: "on"
  - condition: or
    conditions:
      - condition: state
        entity_id: input_boolean.irrigation_cycle1_enable
        state: "on"
      - condition: state
        entity_id: input_boolean.irrigation_cycle2_enable
        state: "on"

# Automations ###############
automation:
  # Set next run time when schedule enabled or time changed
  - id: irrigation_set_next_run_time_when_schedule_enabled_or_time_changed
    alias: Irrigation - Zeitplan bei der Zeitänderung oder Automat Aktivierung
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.irrigation_cycle1_enable
          - input_boolean.irrigation_cycle2_enable
        to: "on"
      - trigger: state
        entity_id:
          - input_select.irrigation_cycle1_schedule_time
          - input_select.irrigation_cycle2_schedule_time
      - trigger: state
        entity_id:
          - input_select.irrigation_cycle1_watering_days
          - input_select.irrigation_cycle2_watering_days
    conditions: *cycle_conditions
    actions:
      - variables:
          cycle: "{{ '1' if 'cycle1' in trigger.entity_id else '2' }}"
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.irrigation_cycle{{ cycle }}_next_run_time
        data:
          date: >
            {% set schedule_time = states('input_select.irrigation_cycle' ~ cycle ~ '_schedule_time') %}
            {{ now().strftime('%Y-%m-%d') if now().strftime('%H:%M') < schedule_time 
              else (now() + timedelta(days=1)).strftime('%Y-%m-%d') }}
          time: "{{ states('input_select.irrigation_cycle' ~ cycle ~ '_schedule_time') }}"

  # Run irrigation cycles at scheduled times
  - id: irrigation_run_cycles
    alias: Irrigation - Automatische Zyklen
    mode: parallel
    triggers:
      - trigger: time
        at: input_datetime.irrigation_cycle1_next_run_time
        variables:
          cycle: "1"
      - trigger: time
        at: input_datetime.irrigation_cycle2_next_run_time
        variables:
          cycle: "2"
    conditions:
      - condition: template
        value_template: >
          {{ is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_enable','on') }}
    actions:
      - action: script.irrigation_check_a_sensor_data
        data:
          cycle: "{{ cycle }}"
      - action: script.irrigation_update_next_runtime
        data:
          cycle: "{{ cycle }}"

  # Run/Cancel Manual Cycles
  - id: irrigation_manual_cycle_control
    alias: Irrigation - Manuelle Steuerung
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.irrigation_cycle1_manual_run
          - input_boolean.irrigation_cycle2_manual_run
    actions:
      - variables:
          cycle: "{{ trigger.entity_id.split('_')[2][-1] }}"
          is_start: "{{ trigger.to_state.state == 'on' }}"
      - choose:
          # Manual Start
          - conditions: "{{ is_start }}"
            sequence:
              - condition: template
                value_template: >
                  {{ is_state('input_boolean.irrigation_cycle' ~ ( '2' if cycle == '1' else '1' ) ~ '_running', 'off') }}
              - action: script.irrigation_prepare_manual_cycle
                data:
                  cycle: "{{ cycle }}"
              - wait_template: "{{ is_state('script.irrigation_run_a_cycle', 'off') }}"
              - action: script.irrigation_restore_state
                data:
                  cycle: "{{ cycle }}"
          # Manual Cancel
          - conditions: "{{ not is_start }}"
            sequence:
              - action: script.irrigation_cancel_cycle
                data:
                  cycle: "{{ cycle }}"

  # Cancel if rain detected
  - id: irrigation_cancel_if_it_rains
    alias: Irrigation - Abbrechen wenn es regnet
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.mower_rainsensor_triggered
        to: "on"
        id: instant
      - trigger: template
        value_template: "{{ is_state('binary_sensor.mower_rainsensor_triggered','on') }}"
        for: "00:01:00"
        id: delayed
    actions:
      - action: timer.cancel
        target:
          entity_id: timer.irrigation_zone_duration
      - action: notify.telegram_schick_home
        data:
          title: ⛈️ Bewässerung abgebrochen
          message: >
            {% if trigger.id == 'instant' %}
            Regen erkannt - sofortiger Abbruch
            {% else %}
            Anhaltender Regen - Bewässerung eingestellt
            {% endif %}

# Scripts ###################
script:
  #######################################
  # Script to check a sensor data
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_check_a_sensor_data:
    alias: Irrigation - Sensorenprüfung
    sequence:
      # Only continue if temperature isn't low
      - condition: template
        value_template: >
          {% if is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on') -%}
            {{ states('sensor.rasen_temperature') >= states('input_number.irrigation_cycle' ~ cycle ~ '_temperature_threshold') }}
          {%- else -%}
            True
          {%- endif %}

      # Only continue if it's no rain
      - condition: template
        value_template: >
          {{ is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'off')
            or (is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on')
              and is_state('binary_sensor.mower_rainsensor_triggered','off')) }}

      - action: script.irrigation_run_a_cycle
        data:
          cycle: "{{ cycle }}"

  # Helper scripts for manual cycle control
  irrigation_prepare_manual_cycle:
    alias: Irrigation - Manuelle Bewässerung vorbereiten
    sequence:
      - action: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "Initialisierung..."
      - action: switch.turn_off
        target:
          entity_id: switch.irrigation_valves
      - action: script.turn_off
        target:
          entity_id:
            - script.irrigation_run_a_cycle
            - script.irrigation_irrigate_a_zone
      - action: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.irrigation_cycle1_enable
            - input_boolean.irrigation_cycle2_enable
      - action: script.irrigation_run_a_cycle
        data:
          cycle: "{{ cycle }}"

  irrigation_restore_state:
    alias: Irrigation - Status wiederherstellen
    sequence:
      - action: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.irrigation_cycle1_manual_run
            - input_boolean.irrigation_cycle2_manual_run
      - action: input_boolean.turn_on
        target:
          entity_id: >
            {% set states = ['irrigation_cycle1_enable_saved_state',
                            'irrigation_cycle2_enable_saved_state'] %}
            {% for state in states if is_state('input_boolean.' ~ state, 'on') %}
              input_boolean.{{ state.replace('_saved_state','') }}
            {% endfor %}

  irrigation_cancel_cycle:
    alias: Irrigation - Zyklus abbrechen
    sequence:
      - parallel:
          - action: switch.turn_off
            target:
              entity_id: switch.irrigation_valves
          - action: script.turn_off
            target:
              entity_id:
                - script.irrigation_run_a_cycle
                - script.irrigation_irrigate_a_zone
          - action: timer.cancel
            target:
              entity_id: timer.irrigation_zone_duration
      - action: homeassistant.turn_off
        target:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_running
      - action: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "-"

  #######################################
  # Script to run a cycle
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_run_a_cycle:
    alias: Irrigation - Ein Zyklus starten
    sequence:
      # Only continue if no cycle is running
      - condition: state
        entity_id: "input_boolean.irrigation_cycle1_running"
        state: "off"

      - condition: state
        entity_id: "input_boolean.irrigation_cycle2_running"
        state: "off"

      # Update ui to show cycle is running
      - action: input_boolean.turn_on
        data:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_running

      # Call the script to irrigate zone 1
      - action: script.irrigation_irrigate_a_zone
        data:
          cycle: "{{ cycle }}"
          zone: "1"

      # Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      # Call the script to irrigate zone 2
      - action: script.irrigation_irrigate_a_zone
        data:
          cycle: "{{ cycle }}"
          zone: "2"

      # Wait for script.irrigation_irrigate_a_zone to end
      - wait_template: "{{ is_state('script.irrigation_irrigate_a_zone', 'off') }}"

      # Update progress in ui
      - action: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "-"

      - action: input_boolean.turn_off
        data:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_running

      # Turn off schedule if run 'Once' selected
      - action: "input_boolean.turn_{{ 'off' if states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Einmal' else 'on' }}"
        target:
          entity_id: input_boolean.irrigation_cycle{{ cycle }}_enable

  #######################################
  # Script to irrigate a zone
  # is passed:
  #   {{ cycle }}
  #   {{ zone }}
  #######################################
  irrigation_irrigate_a_zone:
    alias: Irrigation - Bewässerung einer Zone starten
    sequence:
      # Don't continue if switch is unavailable
      - condition: template
        value_template: >
          {{ states('switch.irrigation_zone' ~ zone ~ '_valve') != 'unavailable' }}

      # Don't continue if duration is zero
      - condition: template
        value_template: >
          {% set n = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | int(0) %}
          {{ n != 0 }}

      # Don't continue if moisture is high or temperatur is too low
      - condition: template
        value_template: >
          {% if is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on') -%}
            {{ states('sensor.rasen_moisture') <= states('input_number.irrigation_zone' ~ zone ~ '_moisture_threshold') and
              states('sensor.rasen_temperature') >= states('input_number.irrigation_cycle' ~ cycle ~ '_temperature_threshold') }}
          {%- else -%}
            True
          {%- endif %}

        # Don't continue if it rains (Если дождь пошёл во время полива)
      - condition: template
        value_template: >
          {{ is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'off')
            or (is_state('input_boolean.irrigation_cycle' ~ cycle ~ '_use_sensor_data', 'on')
              and is_state('binary_sensor.mower_rainsensor_triggered','off')) }}

      # Call the script to set the Tasmota PULSETIME
      - action: script.irrigation_set_tasmota_pulsetime
        data:
          cycle: "{{ cycle }}"
          zone: "{{ zone }}"

      # Wait 2 seconds for good measure to ensure previous zone is completly finished
      - delay: "00:00:02"

      # Update progress in ui
      - action: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "{{ zone }}"

      - action: switch.turn_on
        data:
          entity_id: switch.irrigation_zone{{ zone }}_valve

      # Start timer for zone duration
      - action: timer.start
        data:
          entity_id: timer.irrigation_zone_duration
          duration: >
            {{ states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | int(0) * 60 }}

      - wait_template: >
          {% set entity = 'timer.irrigation_zone_duration' %}
          {{ is_state(entity , 'idle') }}

      - action: switch.turn_off
        data:
          entity_id: switch.irrigation_zone{{ zone }}_valve

      # Update progress in ui
      - action: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_zone
          value: "Zonenwechsel..."

      # Be sure the current zone switch is off
      - wait_template: >
          {% set entity = 'switch.irrigation_zone' ~ zone ~ '_valve' %}
          {{ is_state(entity , 'off') }}

  #######################################
  # Script to update next runtime
  # is passed:
  #   {{ cycle }}
  #######################################
  irrigation_update_next_runtime:
    alias: Irrigation - Zeitplan aktualisieren
    sequence:
      - action: input_datetime.set_datetime
        data:
          entity_id: input_datetime.irrigation_cycle{{ cycle }}_next_run_time
          date: >
            {% if states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Täglich' %}
              {{ (as_timestamp(now() ) + 24 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% elif states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Alle 2 Tage' %}
              {{ (as_timestamp(now() ) + 48 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% elif states('input_select.irrigation_cycle' ~ cycle ~ '_watering_days') == 'Alle 3 Tage' %}
              {{ (as_timestamp(now() ) + 72 * 3600 ) | timestamp_custom("%Y-%m-%d") }}
            {% else %}
              {{ states('input_datetime.irrigation_cycle' ~ cycle ~ '_next_run_time').split(' ')[0] }}
            {% endif %}
          time: >
            {{ states('input_select.irrigation_cycle' ~ cycle ~ '_schedule_time') }}

  #####################################################################
  # Set Tasmota PULSETIME to 30 seconds longer than the zone runtime
  # is passed:
  #   {{ cycle }}
  #   {{ zone }}
  #
  # This acts as a fail safe in the event of any communication failure
  # between HA and the Sonoff. The Sonoff will switch off under its own
  # control so closing the valve.
  #
  # Note: From the Tasmota wiki, for a Pulsetime greater than 11 seconds
  #       it should be set to 100 + (minutes * 60)
  #####################################################################

  irrigation_set_tasmota_pulsetime:
    alias: Irrigation - Tasmota Timer einstellen
    sequence:
      - action: mqtt.publish
        data:
          topic: >
            {% if zone in [1, 2] %}
              {% set tasmota = 'sonoff4ch' %}
            {% endif %}
            cmnd/{{ tasmota }}/pulsetime{{ zone | string}}
          payload: >
            {% set duration = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | float(0) %}
            {% set payload = 100 + (duration * 60) + 30 %}
            {{ payload | int(0) }}
      # Set pump
      - action: mqtt.publish
        data:
          topic: cmnd/sonoff4ch/pulsetime4
          payload: >
            {% set duration = states('input_number.irrigation_cycle' ~ cycle ~ '_zone' ~ zone ~ '_duration') | float(0) %}
            {% set payload = 100 + (duration * 60) + 30 %}
            {{ payload | int(0) }}
