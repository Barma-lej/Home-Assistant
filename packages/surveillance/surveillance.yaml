# Manage a survilance system

scene:
  - id: "Camera - Detection on"
    name: camera_detection_on
    icon: mdi:cctv
    entities:
      switch.einfahrt_ftp_upload: "on"
      switch.einfahrt_push_notifications: "on"
      switch.einfahrt_record: "on"
      switch.einfahrt_record_audio: "on"
      switch.garage_ftp_upload: "on"
      switch.garage_push_notifications: "on"
      switch.garage_record: "on"
      switch.garage_record_audio: "on"
      switch.terrasse_ftp_upload: "on"
      switch.terrasse_push_notifications: "on"
      switch.terrasse_record: "on"
      switch.terrasse_record_audio: "on"
      switch.alfa03: "on"

# Automations #######################################################
automation:
  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
  - id: camera_upload_to_telegram
    alias: Camera - Upload to Telegram
    description: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Telegram
    mode: parallel
    trigger:
      platform: event
      event_type: folder_watcher
      event_data:
        event_type: closed

    condition:
      condition: template
      value_template: "{{ 'cams' in trigger.event.data.path }}"

    action:
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ trigger.event.data.path is search("\d\.mp4$") }}
            sequence:
              - service: shell_command.cam_convert
                data:
                  file_in: "{{ trigger.event.data.path }}"
                  file_out: >
                    {{ trigger.event.data.path | regex_replace( find="\.mp4$", replace="e.mp4", ignorecase=False ) }}

          - conditions:
              - condition: template
                value_template: "{{ 'e.mp4' in trigger.event.data.path }}"
            sequence:
              - service: notify.telegram_schick_home
                data:
                  title: Surveillance
                  message: "Bewegung erkannt!"
                  data:
                    video:
                      - file: "{{ trigger.event.data.path }}"
                        caption: >-
                          {% if 'cam1' in trigger.event.data.folder %}
                            üèÉ *Terrasse* Bewegung
                          {% elif 'cam2' in trigger.event.data.folder %}
                            üöó *Garage* Bewegung
                          {% elif 'cam3' in trigger.event.data.folder %}
                            üè† *Einfahrt* Bewegung
                          {% else %}
                            üèÉ *Bewegung erkannt!*
                          {% endif -%}
                        timeout: 1000
              - service: shell_command.cam_remove_file
                data:
                  file_in: >
                    {{ trigger.event.data.path | regex_replace( find="e\.mp4$", replace=".mp4", ignorecase=False ) }}

          - conditions:
              - condition: template
                value_template: "{{ '.jpg' in trigger.event.data.path }}"
            sequence:
              - service: notify.telegram_schick_home
                data:
                  title: Surveillance
                  message: "Bewegung erkannt!"
                  data:
                    photo:
                      - file: "{{ trigger.event.data.path }}"
                        caption: >-
                          {% if 'cam1' in trigger.event.data.folder %}
                            üèÉ *Terrasse* Bewegung
                          {% elif 'cam2' in trigger.event.data.folder %}
                            üöó *Garage* Bewegung
                          {% elif 'cam3' in trigger.event.data.folder %}
                            üè† *Einfahrt* Bewegung
                          {% else %}
                            üèÉ *Bewegung erkannt!*
                          {% endif -%}

  - id: camera_manage_sending_to_ftp
    alias: "Camera - Manage sending to FTP"
    trigger:
      - platform: state
        entity_id: group.family
        for: "00:04:00"

      - platform: time_pattern
        minutes: "/15"

    condition:
      - "{{ (now().hour < 12 or now().hour > 22)
        or is_state('group.family', 'not_home') }}"

    action:
      - service: scene.turn_on
        target:
          entity_id: scene.camera_detection_on

  # PTZ control with buttons
  - id: camera_ptz_buttons_control
    alias: "Camera - PTZ buttons control"
    trigger:
      platform: state
      entity_id:
        - button.garage_ptz_up
        - button.garage_ptz_down
        - button.garage_ptz_left
        - button.garage_ptz_right

    action:
      - delay: 1
      - service: button.press
        entity_id: button.garage_ptz_stop
# Script ############################################################
#script:
########################################
## Script to record and sent motion video to telegram
## is passed:
##   {{ camera }} Camera entity_id
##   {{ file }} Record file full name
##   {{ caption }}
########################################
#  record_motion:
#    sequence:
#    - service: camera.record
#      data:
#        entity_id: camera.{{ camera }}
#        filename: "{{ file }}"
#        lookback: 30
#        duration: 30
##    - delay: 00:00:45
##    - service: notify.telegram_schick_home
##      data:
##        title: Surveillance
##        message: "Bewegung erkannt!"
##        data:
##          video:
##            - file: "{{ file }}"
##              caption: "{{ caption }}"
##    - service: shell_command.delete_file
##      data:
##        file_path: "{{ file }}"

# type: custom:webrtc-camera
# entity: camera.reolink_e1_zoom_profile000_mainstream
# webrtc: true
# muted: false
# ptz:
#   service: onvif.ptz
#   data_left:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     pan: LEFT
#     move_mode: ContinuousMove
#   data_right:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     pan: RIGHT
#     move_mode: ContinuousMove
#   data_up:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     tilt: UP
#     move_mode: ContinuousMove
#   data_down:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     tilt: DOWN
#     move_mode: ContinuousMove
#   data_zoom_in:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     zoom: ZOOM_IN
#     move_mode: ContinuousMove
#   data_zoom_out:
#     entity_id: camera.reolink_e1_zoom_profile001_substream
#     zoom: ZOOM_OUT
#     move_mode: ContinuousMove
