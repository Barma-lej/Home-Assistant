- id: tasmota_state_on_startup
  alias: Tasmota - Power state on HA startup
  triggers:
  - event: start
    trigger: homeassistant
  actions:
  - action: mqtt.publish
    data:
      payload: '1'
      topic: sonoffs/cmnd/state
  - action: mqtt.publish
    data:
      payload: '1'
      topic: sonoffs/tele/STATE
- id: rolladen_auf
  alias: Rolladen - Auf
  description: ''
  triggers:
  - event: sunrise
    offset: 03:00:00
    trigger: sun
  conditions: []
  actions:
  - data:
      entity_id: cover.rolladen
      position: 100
    action: cover.set_cover_position
  - data:
      message: Rolladen geöffnet
      title: "\U0001F53C Rolladen"
    action: notify.telegram_schick_home
  mode: single
- id: rolladen_zu
  alias: Rolladen - Zu
  description: ''
  triggers:
  - event: sunset
    offset: 01:30:00
    trigger: sun
  conditions: []
  actions:
  - data:
      entity_id: cover.rolladen
      position: 0
    action: cover.set_cover_position
  - data:
      message: Rolladen geschlossen
      title: "\U0001F53D Rolladen"
    action: notify.telegram_schick_home
  mode: single
- id: garagenlicht_einschalten
  alias: Garage - Licht einschalten
  description: Garagenlicht einschalten nach der Sonnenunregang oder wenn es dunkel
    ist
  triggers:
  - type: value
    trigger: device
    device_id: db8b13c767d84865a607aca77975a221
    entity_id: sensor.torposition
    domain: sensor
    above: 40
    for:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  conditions:
  - condition: or
    conditions:
    - condition: sun
      before: sunrise
      before_offset: 00:15:00
    - condition: sun
      after: sunset
      after_offset: -00:15:00
  actions:
  - type: turn_on
    device_id: 63713a671de1472e84d5832bcb399f0e
    entity_id: light.sonoffbnsz01
    domain: light
    brightness_pct: 95
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - type: turn_off
    device_id: 63713a671de1472e84d5832bcb399f0e
    entity_id: light.sonoffbnsz01
    domain: light
  mode: restart
- id: garagenlicht_ausschalten
  alias: Garage - Licht ausschalten
  description: Garagenlicht ausschalten wenn das Garagentor geschlossen wurde
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.tor_ist_geschlossen
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  - trigger: state
    entity_id: input_boolean.torteil
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - type: turn_off
    device_id: 63713a671de1472e84d5832bcb399f0e
    entity_id: light.sonoffbnsz01
    domain: light
  mode: restart
- id: camera_garage_richtung
  alias: Camera - Garage Richtung
  description: Направление камеры в зависимости от положения гаражных ворот
  triggers:
  - type: value
    trigger: device
    device_id: db8b13c767d84865a607aca77975a221
    entity_id: sensor.torposition
    domain: sensor
    above: 30
    for:
      hours: 0
      minutes: 0
      seconds: 5
  - type: value
    trigger: device
    device_id: db8b13c767d84865a607aca77975a221
    entity_id: sensor.torposition
    domain: sensor
    below: 20
    for:
      hours: 0
      minutes: 0
      seconds: 5
  - trigger: state
    entity_id:
    - binary_sensor.tor_ist_geschlossen
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 3
  - trigger: state
    entity_id: input_boolean.torteil
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 5
  conditions: []
  actions:
  - choose:
    - conditions:
      - type: is_value
        condition: device
        device_id: db8b13c767d84865a607aca77975a221
        entity_id: sensor.torposition
        domain: sensor
        above: 30
      sequence:
      - action: select.select_option
        data:
          option: Tor
        target:
          entity_id: select.garage_ptz_preset
    - conditions:
      - type: is_value
        condition: device
        device_id: db8b13c767d84865a607aca77975a221
        entity_id: sensor.tor_distanz
        domain: sensor
        below: 20
      sequence:
      - action: select.select_option
        data:
          option: Tuer
        target:
          entity_id: select.garage_ptz_preset
      - delay:
          hours: 0
          minutes: 0
          seconds: 30
          milliseconds: 0
      - action: select.select_option
        data:
          option: Tuer
        target:
          entity_id: select.garage_ptz_preset
    default: []
  mode: restart
- id: '1661601350027'
  alias: Считана метка Red
  description: ''
  triggers:
  - trigger: tag
    tag_id: 4d4d9d64-59ff-4a65-8d8c-d1a088f46599
  conditions: []
  actions:
  - action: switch.toggle
    data: {}
    target:
      entity_id: switch.tor
  mode: single
- id: '1661607357549'
  alias: Считана метка Green
  description: ''
  triggers:
  - trigger: tag
    tag_id: 25cf4f63-039d-47b6-8012-32e9e6cb831d
  conditions: []
  actions:
  - action: light.toggle
    data: {}
    target:
      entity_id: light.sonoffpow_01
  mode: single
- id: '1668006470208'
  alias: Garage - Coming home
  description: Open tor if Tiguan is coming to home
  triggers:
  - device_id: d65b64c785a29ffed795c6d22780bb9f
    domain: device_tracker
    entity_id: e26c53c9fa2534a4da69f77b06f7414f
    type: enters
    trigger: device
    zone: zone.home
  conditions:
  - condition: state
    entity_id: sensor.as25_bluetooth_connection
    attribute: connected_paired_devices
    state: B4:EC:02:94:8A:CF (VW BT 1505)
    enabled: false
  - condition: numeric_state
    entity_id: sensor.torposition
    below: 15
  - condition: or
    conditions:
    - condition: template
      value_template: '{{ "68:4E:05:63:56:10 (VOLKSWAGEN-21ED)" in state_attr("sensor.as25_bluetooth_connection",
        "connected_paired_devices") }}'
    - condition: template
      value_template: '{{ "B4:EC:02:94:8A:CF (VW BT 1505)" in state_attr("sensor.as25_bluetooth_connection",
        "connected_paired_devices") }}'
  actions:
  - data: {}
    target:
      entity_id: switch.tor
    action: switch.turn_on
  - data:
      message: TTS
      title: Garage
      data:
        ttl: 0
        priority: high
        media_stream: alarm_stream_max
        tts_text: Die Garage öffnet
    action: notify.mobile_app_as25
  mode: single
- id: '1668017327174'
  alias: Garage - Leaving home
  description: Close tor if Tiguan is leaving home
  triggers:
  - device_id: d65b64c785a29ffed795c6d22780bb9f
    domain: device_tracker
    entity_id: e26c53c9fa2534a4da69f77b06f7414f
    type: leaves
    trigger: device
    zone: zone.home
  conditions:
  - condition: state
    entity_id: sensor.as25_bluetooth_connection
    attribute: connected_paired_devices
    state: B4:EC:02:94:8A:CF (VW BT 1505)
    enabled: false
  - condition: or
    conditions:
    - condition: template
      value_template: '{{ "68:4E:05:63:56:10 (VOLKSWAGEN-21ED)" in state_attr("sensor.as25_bluetooth_connection",
        "connected_paired_devices") }}'
    - condition: template
      value_template: '{{ "B4:EC:02:94:8A:CF (VW BT 1505)" in state_attr("sensor.as25_bluetooth_connection",
        "connected_paired_devices") }}'
  - condition: numeric_state
    entity_id: sensor.torposition
    above: 15
  actions:
  - data: {}
    target:
      entity_id: switch.tor
    action: switch.turn_on
  - data:
      message: TTS
      title: Garage
      data:
        ttl: 0
        priority: high
        media_stream: alarm_stream_max
        tts_text: Die Garage schlisst
    action: notify.mobile_app_as25
  - wait_for_trigger:
    - trigger: numeric_state
      entity_id: sensor.torposition
      for:
        hours: 0
        minutes: 0
        seconds: 5
      below: 6
    timeout:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
    continue_on_timeout: false
  - data:
      message: TTS
      title: Garage
      data:
        ttl: 0
        priority: high
        media_stream: alarm_stream_max
        tts_text: Die Garage ist geschlossen
    action: notify.mobile_app_as25
  mode: single
- id: 3d_prtint_is_done
  alias: 3D - Druck ist fertig
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.ender_3_s1_pro_current_print_state
    for:
      hours: 0
      minutes: 10
      seconds: 0
    to: complete
  conditions: []
  actions:
  - action: camera.snapshot
    metadata: {}
    data:
      filename: /config/www/screenshots/3dprinter.jpg
    target:
      entity_id: camera.ender_3_s1_pro_sony
  - action: notify.telegram_schick_home
    data:
      message: "\U0001F3ED 3D Druck ist fertig"
      data:
        photo:
        - file: /config/www/screenshots/3dprinter.jpg
          caption: "\U0001F3ED 3D Druck ist fertig"
  - action: notify.telegram_schick_home
    data:
      message: "\U0001F3ED 3D Druck ist fertig"
      data:
        photo:
        - url: '{{ state_attr(''sensor.ender_3_s1_pro_thumbnail'',''url'') }}'
          caption: "\U0001F3ED 3D Druck ist fertig"
    enabled: false
  - wait_for_trigger:
    - trigger: numeric_state
      entity_id: sensor.ender_3_s1_pro_extruder_temperature
      below: 70
    timeout:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
    enabled: true
  - if:
    - condition: template
      value_template: '{{ not is_state(''sensor.ender_3_s1_pro_current_print_state'',''printing'')

        and not is_state(''sensor.ender_3_s1_pro_current_print_state'',''paused'')}}'
    then:
    - action: switch.turn_off
      data: {}
      target:
        entity_id: switch.tuyaplug1
    - action: notify.telegram_schick_home
      data:
        message: "\U0001F3ED 3D Drucker ist ausgeschaltet"
    enabled: true
  mode: single
- id: '1674336725023'
  alias: Erinnerung - Mühlabfuhr
  description: ''
  use_blueprint:
    path: westenberg/garbage-reminder.yaml
    input:
      garbage_sensor_1: sensor.restabfall
      garbage_sensor_2: sensor.leichtverpackungen
      garbage_sensor_3: sensor.papier
      notifier: notify.telegram_schick_home
      day_offset: '1'
      reminder_time: '18:20:00'
      reminder_message: 'Folgender Müll wird morgen abgeholt: '
      reminder_title: "\U0001F5D1️ Müllabfuhr Erinnerung"
- id: '1694760290268'
  alias: HASS - CleanUp stale devices
  description: Remove all stale devices from Home Assistant
  triggers:
  - trigger: time
    at: 00:00:00
  conditions:
  - condition: time
    weekday:
    - mon
  actions:
  - action: button.press
    data: {}
    target:
      entity_id:
      - button.fritz_box_5590_fiber_cleanup
      - button.fritz_box_7590_ax_cleanup
  - action: ble_monitor.cleanup_entries
    data: {}
  - action: tts.clear_cache
    data: {}
  mode: single
- id: '1704829899531'
  alias: Aktualisierung
  description: Aktualisierungsbenachrichtigung
  use_blueprint:
    path: mdegat01/update_notifications.yaml
    input:
      update_entities:
      - update.einfahrt_update
      - update.esphome_update
      - update.fritz_box_5590_fiber_fritz_os
      - update.ftp_update
      - update.garage_update
      - update.garagegate_firmware
      - update.home_assistant_core_update
      - update.home_assistant_supervisor_update
      - update.markise_firmware
      - update.mosquitto_broker_update
      - update.nginx_home_assistant_ssl_proxy_update
      - update.pi_hole_v6_integration_update
      - update.pi_hole_core_update_available
      - update.pi_hole_ftl_update_available
      - update.samba_share_update
      - update.sqlite_web_update
      - update.studio_code_server_update
      - update.tasmoadmin_update
      - update.terminal_ssh_update
      - update.terrasse_update
      - update.innen_firmware
      - update.matter_server_update
      - update.vlc_update
      - update.fritz_box_7590_ax_fritz_os
      - update.music_assistant_server_update
      - update.shelly1pmminig3_34b7da8db254_firmware_update
      - update.aha_region_update
      - update.bar_card_update
      - update.card_tools_update
      - update.comfortable_environment_card_update
      - update.firmware_update
      - update.fold_entity_row_update
      - update.go2rtc_update
      - update.hacs_update
      - update.landroid_card_update
      - update.landroid_cloud_update
      - update.let_s_encrypt_update
      - update.local_tuya_update
      - update.mini_media_player_update
      - update.mini_graph_card_update
      - update.moonraker_update
      - update.mushroom_themes_update
      - update.passive_ble_monitor_integration_update
      - update.polr_ytube_media_card_update
      - update.restriction_card_update
      - update.samsung_soundbar_update
      - update.slider_button_card_update
      - update.slider_entity_row_update
      - update.spook_your_homie_update
      - update.thermal_comfort_icons_update
      - update.thermal_comfort_update
      - update.vacuum_card_update
      - update.weather_chart_card_update
      - update.webrtc_camera_update
      - update.xiaomi_mi_smart_pedestal_fan_integration_update
      - update.xiaomi_smartmi_fan_card_update
      - update.xiaomi_vacuum_map_card_update
      - update.yandex_smart_home_update
      - update.yandex_station_intents_update
      - update.yandex_station_update
      - update.ytube_music_player_update
      - update.pi_hole_web_update_available
      - update.maxi_media_player_update
      - update.samsungtv_smart_update
      - update.card_mod_update
      - update.pi_hole_docker_update_available
      - update.seitenmarkise_74aab6_firmware
      mobile_app_device: d65b64c785a29ffed795c6d22780bb9f
      reminder_hours: '6'
      run_config_check: true
      send_to_ha: true
      mobile_app_device_2: d65b64c785a29ffed795c6d22780bb9f
- id: camera_manage_status_led
  alias: Camera - Manage status LED
  triggers:
  - trigger: sun
    event: sunrise
    id: sunrise
  - trigger: sun
    event: sunset
    id: sunset
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - sunrise
      sequence:
      - action: light.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: light.innen_status_led
    - conditions:
      - condition: trigger
        id:
        - sunset
      sequence:
      - action: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.innen_status_led
  mode: single
- id: tv_board_manage
  alias: TV Board - Verwaltung
  description: 'Funktioniert nur wenn TV aus ist.

    Wenn TV Board ist an und (Niemand ist Zuhause oder Zeit ist zwischen 23:00 und
    11:00) dann TV Board ausschalten

    Wenn TV Board ist aus und (Jemand ist Zuhause oder Zeit ist zwischen 11:00 and
    23:00) dann TV Board einschalten'
  triggers:
  - trigger: state
    entity_id: group.family
    for: 00:04:00
  - trigger: time_pattern
    minutes: /15
  conditions:
  - condition: or
    conditions:
    - condition: template
      value_template: '{{ is_state(''media_player.sony_kd55x8505b'', ''off'') }}'
      enabled: false
    - condition: state
      entity_id: media_player.sony_kd_55x8505b
      state: 'off'
      enabled: false
    - condition: state
      entity_id: media_player.gq75qn92catxzg
      state: 'off'
  actions:
  - alias: Выбор условий для выключения и включения TV Board
    enabled: false
    choose:
    - conditions:
      - condition: template
        value_template: '{{ is_state(''switch.tuyaplug2'', ''on'') and (is_state(''group.family'',
          ''not_home'') or now().hour < 12 or now().hour > 22) }}'
      sequence:
      - action: switch.turn_off
        target:
          entity_id: switch.tuyaplug2
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ is_state(''switch.tuyaplug2'', ''off'') and is_state(''group.family'',
          ''home'') and (now().hour > 11 and now().hour < 23) }}'
      sequence:
      - action: switch.turn_on
        target:
          entity_id: switch.tuyaplug2
        data: {}
  - if:
    - condition: template
      value_template: '{{ is_state(''switch.tuyaplug2'', ''on'') and (is_state(''group.family'',
        ''not_home'') or now().hour < 12 or now().hour > 22) }}'
    then:
    - action: switch.turn_off
      target:
        entity_id: switch.tuyaplug2
      data: {}
  mode: single
- id: rolladen_close_if_its_hot
  alias: Rolladen - Automatisch schließen bei Hitze und Sonne
  description: Schließt bestimmte Rolläden, wenn es heiß ist und die Sonne entsprechend
    steht, um die Räume kühl zu halten. Berücksichtigt individuelle Azimut-Schwellenwerte
    pro Rolladen.
  triggers:
  - minutes: /5
    trigger: time_pattern
  conditions:
  - condition: template
    value_template: "{% set sun_azimuth = state_attr('sun.sun', 'azimuth') | float(0)
      %} {% set sun_elevation = state_attr('sun.sun', 'elevation') | float(-91) %}
      {# По умолчанию ниже любого типичного SUN_ELEVATION_MIN_ACTIVE #} {% set current_clouds
      = state_attr('weather.openweathermap', 'cloud_coverage') | int(CLOUD_COVERAGE_MAX)
      %} {# По умолчанию, чтобы условие current_clouds < CLOUD_COVERAGE_MAX стало
      ложным #} {% set ground_temp = states('sensor.rasen_temperature') | float(GROUND_TEMP_THRESHOLD
      - 1) %} {# По умолчанию, чтобы условие ground_temp > GROUND_TEMP_THRESHOLD стало
      ложным #} {% set terrasse_temp = states('sensor.ble_temperature_temperatur_gt')
      | float(TERRASSE_TEMP_THRESHOLD - 1) %} {# По умолчанию, чтобы условие terrasse_temp
      > TERRASSE_TEMP_THRESHOLD стало ложным #}\n{{ SUN_AZIMUTH_MIN_ACTIVE < sun_azimuth
      < SUN_AZIMUTH_MAX_ACTIVE\n  and sun_elevation > SUN_ELEVATION_MIN_ACTIVE\n  and
      (ground_temp > GROUND_TEMP_THRESHOLD or terrasse_temp > TERRASSE_TEMP_THRESHOLD)\n
      \ and current_clouds < CLOUD_COVERAGE_MAX\n}}\n"
  actions:
  - repeat:
      for_each: '{{ COVERS_TO_MANAGE }}'
      sequence:
      - variables:
          cover_entity_id: '{{ repeat.item.entity }}'
          current_sun_azimuth: '{{ state_attr(''sun.sun'', ''azimuth'') | float(0)
            }}'
          cover_current_pos: '{{ state_attr(cover_entity_id, ''current_position'')
            | int(-1) }}'
          cover_last_changed_timestamp: '{{ as_timestamp(states[cover_entity_id].last_changed,
            0) }}'
      - condition: template
        value_template: "{# Проверяем, прошел ли азимут солнца триггерный азимут для
          этого роллета. Не двигать, если уже в целевой позиции #} {{ current_sun_azimuth
          >= repeat.item.azimuth_close_trigger and\n  cover_current_pos > repeat.item.current_pos_above
          and\n  cover_current_pos != repeat.item.target_pos and\n  ((as_timestamp(now())
          - cover_last_changed_timestamp) / 60) > COOLDOWN_MINUTES\n}}\n"
      - target:
          entity_id: '{{ cover_entity_id }}'
        data:
          position: '{{ repeat.item.target_pos }}'
        action: cover.set_cover_position
  variables:
    GROUND_TEMP_THRESHOLD: 22
    TERRASSE_TEMP_THRESHOLD: 22
    CLOUD_COVERAGE_MAX: 40
    SUN_AZIMUTH_MIN_ACTIVE: 150
    SUN_AZIMUTH_MAX_ACTIVE: 300
    SUN_ELEVATION_MIN_ACTIVE: 10
    COOLDOWN_MINUTES: 240
    COVERS_TO_MANAGE:
    - entity: cover.shellyswitch25_f37a8c
      azimuth_close_trigger: 150
      current_pos_above: 40
      target_pos: 0
    - entity: cover.shellyswitch25_f37b28
      azimuth_close_trigger: 180
      current_pos_above: 40
      target_pos: 0
    - entity: cover.shellyswitch25_10eaa4
      azimuth_close_trigger: 220
      current_pos_above: 40
      target_pos: 0
    - entity: cover.shellyswitch25_10d315
      azimuth_close_trigger: 240
      current_pos_above: 75
      target_pos: 60
- id: markise_control
  alias: Markise Verwaltung
  description: Markise automatisch steuern basierend auf Sonne, Temperatur, Wolken
    und Regen.
  triggers:
  - trigger: time_pattern
    minutes: /5
  - trigger: template
    value_template: '{{ is_state(RAIN_SENSOR, ''on'') or (state_attr(''sun.sun'',
      ''elevation'') | float(999) < SUN_ELEVATION_THRESHOLD_CLOSE) }}'
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: "{% set sun_azimuth = state_attr('sun.sun', 'azimuth') | float(0)
          %} {% set sun_elevation = state_attr('sun.sun', 'elevation') | float(0)
          %} {% set current_temp = states(TEMP_SENSOR) | float(-100) %} {% set cloud_coverage
          = state_attr(WEATHER_SENSOR, 'cloud_coverage') | float(101) %} {% set current_pos
          = state_attr(COVER_ENTITY_ID, 'current_position') | int(-1) %} {% set cover_last_changed_timestamp
          = as_timestamp(states[COVER_ENTITY_ID].last_changed, 0) %}\n{{ sun_azimuth
          > SUN_AZIMUTH_MIN_OPEN and\n  sun_elevation >= SUN_ELEVATION_MIN_OPEN and\n
          \ current_temp > TEMP_THRESHOLD_OPEN and\n  cloud_coverage < CLOUD_COVERAGE_THRESHOLD_OPEN
          and\n  is_state(RAIN_SENSOR, 'off') and\n  current_pos != POSITION_SUN_PROTECTION
          and\n  ((as_timestamp(now()) - cover_last_changed_timestamp) / 60) > COOLDOWN_MINUTES\n}}\n"
        alias: Если солнце мешает, жарко, нет облаков и дождя
      sequence:
      - delay: 3
      - action: cover.set_cover_position
        data:
          position: '{{ POSITION_SUN_PROTECTION }}'
        target:
          entity_id: '{{ COVER_ENTITY_ID }}'
    - conditions:
      - condition: template
        value_template: "{% set sun_elevation = state_attr('sun.sun', 'elevation')
          | float(999) %} {% set current_pos = state_attr(COVER_ENTITY_ID, 'current_position')
          | int(-1) %}\n{{ (is_state(RAIN_SENSOR, 'on') or\n  sun_elevation < SUN_ELEVATION_THRESHOLD_CLOSE)
          and\n  current_pos != POSITION_RETRACTED\n}}\n"
      alias: Если солнце уже не мешает или дождь
      sequence:
      - delay: 3
      - action: cover.set_cover_position
        data:
          position: '{{ POSITION_RETRACTED }}'
        target:
          entity_id: '{{ COVER_ENTITY_ID }}'
  trigger_variables:
    SUN_ELEVATION_THRESHOLD_CLOSE: 11
    RAIN_SENSOR: binary_sensor.mower_rainsensor_triggered
  variables:
    COVER_ENTITY_ID: cover.markise
    TEMP_SENSOR: sensor.ble_temperature_temperatur_gt
    WEATHER_SENSOR: weather.openweathermap
    TEMP_THRESHOLD_OPEN: 22
    CLOUD_COVERAGE_THRESHOLD_OPEN: 40
    SUN_AZIMUTH_MIN_OPEN: 180
    SUN_ELEVATION_MIN_OPEN: 15
    POSITION_SUN_PROTECTION: 100
    POSITION_RETRACTED: 0
    COOLDOWN_MINUTES: 60
  mode: single
- id: vacuum_when_nobody_home
  alias: Robi - Niemand zu Hause ist
  description: Wenn Niemand Zuhause ist, dann staubsaugen.
  triggers:
  - trigger: state
    entity_id:
    - group.family
    for:
      hours: 0
      minutes: 10
      seconds: 0
    to: not_home
  conditions:
  - condition: template
    value_template: '{{ (states("sensor.robi_last_clean_start") | as_datetime).date()
      < now().date() }}'
  actions:
  - action: script.robi_flur
    metadata: {}
    data: {}
  mode: single
- id: '1726090038559'
  alias: HA - Renew certificate
  description: ''
  triggers:
  - trigger: time
    at: 04:00:00
  conditions:
  - condition: template
    value_template: '{% set expired = (states(''sensor.barma_partia_de_cert_expiry'')
      | as_datetime | as_local) %}

      {{ (expired.date() - now().date()).days < 7 }}'
  actions:
  - action: hassio.addon_start
    metadata: {}
    data:
      addon: core_letsencrypt
    enabled: false
  - action: hassio.addon_restart
    metadata: {}
    data:
      addon: core_letsencrypt
  mode: single
- id: weihnachten_licht_an
  alias: Weihnachten - Licht An
  description: Weihnachten licht an am Abend
  triggers:
  - trigger: sun
    event: sunset
    offset: -00:15:00
  conditions:
  - condition: state
    entity_id: group.family_wlan
    alias: Is anybody home
    state: home
  actions:
  - action: switch.turn_on
    data:
      entity_id: switch.weihnachten
  mode: single
- id: weihnachten_licht_an_anatolij
  alias: Weihnachten - Licht An Anatolij
  description: Weihnachten licht an am Morgens für Anatolij
  mode: single
  triggers:
  - trigger: time
    at: 08:20:00
  conditions:
  - condition: and
    conditions:
    - condition: sun
      before: sunrise
      after_offset: 00:15:00
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
  actions:
  - action: switch.turn_on
    data:
      entity_id: switch.weihnachten
- id: weihnachten_licht_an_wenn_jemand_kommt
  alias: Weihnachten - Licht An wenn jemand kommt
  description: Weihnachten licht an wenn jemand kommt
  triggers:
  - trigger: state
    entity_id:
    - group.family_wlan
    - group.family
    from: not_home
    to: home
    for:
      hours: 0
      minutes: 3
      seconds: 0
  conditions:
  - condition: template
    value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 4 }}'
  actions:
  - action: switch.turn_on
    data:
      entity_id: switch.weihnachten
  mode: single
- id: weihnachten_licht_aus
  alias: Weihnachten - Licht Aus
  description: Weihnachten licht aus
  triggers:
  - trigger: time
    at:
    - 00:00:00
    - 09:30:00
  - trigger: sun
    event: sunrise
    offset: 00:15:00
  - trigger: state
    entity_id:
    - group.family_wlan
    - group.family
    from: home
    to: not_home
    for:
      hours: 0
      minutes: 5
      seconds: 0
  conditions: []
  actions:
  - action: switch.turn_off
    data:
      entity_id: switch.weihnachten
  mode: single
- id: robi_yandex_home
  alias: Robi - Yandex Haus
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Уберись дома
  actions:
  - action: script.robi_home
  mode: single
- id: robi_yandex_kitchen
  alias: Robi - Yandex Küche
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери кухню
  actions:
  - action: script.robi_kitchen
  mode: single
- id: robi_yandex_living_room
  alias: Robi - Yandex Wohnzimmer
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери зал
  actions:
  - action: script.robi_living_room
  mode: single
- id: robi_yandex_stube
  alias: Robi - Yandex Stube
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери гостиную
  actions:
  - action: script.robi_stube
    data: {}
  mode: single
- id: robi_yandex_bedroom
  alias: Robi - Yandex Schlafzimmer
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери спальню
  actions:
  - action: script.robi_bedroom
  mode: single
- id: robi_yandex_flur
  alias: Robi - Yandex Flur
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери коридор
  actions:
  - action: script.robi_flur
  mode: single
- id: robi_yandex_hwr
  alias: Robi - Yandex HWR
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери кладовку
  actions:
  - action: script.robi_hwr
    data: {}
  mode: single
- id: robi_yandex_wc
  alias: Robi - Yandex WC
  description: ''
  triggers:
  - trigger: event
    event_type: yandex_intent
    event_data:
      text: Убери туалет
  actions:
  - action: script.robi_wc
  mode: single
- id: seitenmarkise_control
  alias: Seitenmarkise Verwaltung
  description: Seitenmarkise automatisch steuern basierend auf Sonne, Temperatur,
    Wolken und Regen.
  triggers:
  - trigger: time_pattern
    minutes: /5
  - trigger: template
    value_template: '{{ is_state(RAIN_SENSOR, ''on'') or (state_attr(''sun.sun'',
      ''elevation'') | float(999) < SUN_ELEVATION_THRESHOLD_RETRACT) }}'
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: "{% set sun_azimuth = state_attr('sun.sun', 'azimuth') | float(0)
          %} {% set sun_elevation = state_attr('sun.sun', 'elevation') | float(0)
          %} {% set current_temp = states(TEMP_SENSOR) | float(-100) %} {% set cloud_coverage
          = state_attr(WEATHER_SENSOR, 'cloud_coverage') | float(101) %} {% set current_pos
          = state_attr(COVER_ENTITY_ID, 'current_position') | int(-1) %} {% set cover_last_changed_timestamp
          = as_timestamp(states[COVER_ENTITY_ID].last_changed, 0) %}\n{{ sun_azimuth
          > SUN_AZIMUTH_MIN_DEPLOY and\n  sun_elevation >= SUN_ELEVATION_MIN_DEPLOY
          and\n  current_temp > TEMP_THRESHOLD_DEPLOY and\n  cloud_coverage < CLOUD_COVERAGE_THRESHOLD_DEPLOY
          and\n  is_state(RAIN_SENSOR, 'off') and\n  current_pos != POSITION_SUN_PROTECTION
          and\n  ((as_timestamp(now()) - cover_last_changed_timestamp) / 60) > COOLDOWN_MINUTES\n}}\n"
        alias: Если солнце мешает, жарко, нет облаков и дождя
      sequence:
      - action: cover.set_cover_position
        data:
          position: '{{ POSITION_SUN_PROTECTION }}'
        target:
          entity_id: '{{ COVER_ENTITY_ID }}'
    - conditions:
      - condition: template
        value_template: "{% set sun_elevation = state_attr('sun.sun', 'elevation')
          | float(999) %} {% set current_pos = state_attr(COVER_ENTITY_ID, 'current_position')
          | int(-1) %}\n{{ (is_state(RAIN_SENSOR, 'on') or\n  sun_elevation < SUN_ELEVATION_THRESHOLD_RETRACT)
          and\n  current_pos != POSITION_RETRACTED\n}}\n"
      alias: Если солнце уже не мешает или дождь
      sequence:
      - action: cover.set_cover_position
        data:
          position: '{{ POSITION_RETRACTED }}'
        target:
          entity_id: '{{ COVER_ENTITY_ID }}'
  trigger_variables:
    SUN_ELEVATION_THRESHOLD_RETRACT: 11
    RAIN_SENSOR: binary_sensor.mower_rainsensor_triggered
  variables:
    COVER_ENTITY_ID: cover.seitenmarkise
    TEMP_SENSOR: sensor.ble_temperature_temperatur_gt
    WEATHER_SENSOR: weather.openweathermap
    TEMP_THRESHOLD_DEPLOY: 22
    CLOUD_COVERAGE_THRESHOLD_DEPLOY: 40
    SUN_AZIMUTH_MIN_DEPLOY: 180
    SUN_ELEVATION_MIN_DEPLOY: 12
    POSITION_SUN_PROTECTION: 15
    POSITION_RETRACTED: 100
    COOLDOWN_MINUTES: 60
  mode: single
- id: '1746608947446'
  alias: debug
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - switch.sonoffs20_2
    to: 'on'
    id: cycle1
  - trigger: state
    entity_id:
    - switch.sonoffs20_2
    to: 'off'
    id: cycle2
  conditions: []
  actions:
  - action: notify.telegram_bot_anatolij
    metadata: {}
    data:
      message: '{{ trigger.id[-1] }}'
  mode: single
- id: garage_smartthing_sync
  alias: Garage - Smarttagsverwaltung
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - switch.st_virtual_switch1
    - switch.st_virtual_switch2
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.entity_id == ''switch.st_virtual_switch1'' }}'
      sequence:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.tor
    - conditions:
      - condition: template
        value_template: '{{ trigger.entity_id == ''switch.st_virtual_switch2'' }}'
      sequence:
      - action: switch.toggle
        metadata: {}
        data: {}
        target:
          entity_id: switch.torteil
  mode: single
